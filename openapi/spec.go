// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
