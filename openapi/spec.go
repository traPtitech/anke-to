// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
