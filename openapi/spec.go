// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
