// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
