// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
