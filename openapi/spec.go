// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
