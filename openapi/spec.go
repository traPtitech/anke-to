// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xd3XPUxpb/V6a0+wC1MmNM7sP6zcSpW64KdyEmuw+xa0qeaWzlzkiDpAFmqalya/gw",
	"eACXCXYcExsnjm1wGJxLluuAgf9l2xrPPOVf2OrWV0tqjaT5MCS1VRTFSP1xPn59zunTp8V1LisXirIE",
	"JE3lhq9zRUERCkADCvklS/nySK4gSqKqKYIGcmfL58CYdKEElDJ+nwNqVhGLmihL3DDXvP3MmLuFYO2o",
	"vnG0cKs5exPBXQSfIfgjglsI3iD/voF0HcE6+fPeeLBkvFtOndCUEjjJp0I76vNWL103FnaRDsnzFQR/",
	"Q3DLHuSSkFfBSTSro+ptVH2E9Keououqcwi+IK/QrD4hcTwnYmIvEx54ThIKgBtmc8rxnJqdAQUB86qV",
	"i7jhlCzngSBxlQpPOp0rfwHUoiyp0XKpG6trR8+/YXLua3P45idjc6mv3LqEx2HzoqBMA02UpuPoH+nv",
	"UfUA6f9A1SqhKESZLEHE7dtP0VDMRsmmKEyHC+Tw7SNU/Y6ws3+0WkdwPnWi8fiZUf/u6N1TrOsnvxoL",
	"mKrTdLOTIZThqVjkiJIGpoFCyLlcAiqeXBJEBYyNjknnBW0mSBjSf0DVl0j/BU9anRsbdcVRxB2cOX3j",
	"cTyngMslUQE5bhgrLIIcxV4aoZSYcA8nwB2h07nHZUUL19D+FoIvW09upU4cvn3cmFtoLP/UWNERrDWW",
	"9hBcRvBGaoJTS1MFUdNALiNoExyf8jU1Hmya7Qb8DTGY9U2MvOougvXGt7fxVBOcJmp5wGjQWrlnNhhw",
	"WjRWf20s7THJKsg58ZLoTOZr6VLlaZcKg5cqK5oHXv+qgEvcMPcvaddDpM23avoLSrgXseyxxFUgKNmZ",
	"UFn7hbH5+OjXH8KIIUOx0K5qiihNm/N1r9msAoQYevU2+9NqldJmxe5D4oDPcqJ2gTYF+KGQz//HJW74",
	"q/ZjXvBZkAqfoP1ZQQWRPQLEmeZbHZFyxKOrZISiIheBoomAMGTbNfJD1EBBjZKNPQNX4W0oCooilC1b",
	"Yxumr6ihJyuTFZ6LJm/YT52An0cR9KUKFDzIXxW5VFQJWWTgpP1cfuSpr0FWwyNZ72jZeFcXaZD68kvL",
	"cF+SlYKgccNcqSTmON6/Vv0S47m/gauOQBNDKRYq7MbjQMOeXD1bNpE96Z29GzQnoqN/yKRlGR+cNlzw",
	"vwSTmElbOE5gGEDmlJwrxybMHuYs7sQAgahmcopwiSAWXBMKxTywPTsj0qLZcHryJkWTDAx/IHwFFOr6",
	"Dg+f3NDg0ODA4OmBwdMXBweHyZ9/G/z34cFBej3lBA0MaGIBsBaVrcyMmGME4y+fGY8eIH2x+f6tcfcJ",
	"jpH1eSfglEr5vB0FOySd5gNxlC+itGZq1yMEcE53nhaIiTiP3EMhF2BfVDPuTOy40nh/s/VkDsF5BJ8i",
	"eAvBecJxBLrIjN7x2wHMhwCybQYJ4Gb3vwiuaYlhhzt9LhOBJOv4t1Jhimg4WbdxUZrOg09nZDGbfI2c",
	"K+U1sdhx9/GskLcseMTIiZc81hyDOi8S5WLQMEd4Oh+y7BGCcGIxZamoI2Yo9XqZKAjXMleEfAmwtk08",
	"VxCl8NeVWGSbauqIakvDTKLzwhTIM0Ueg6U2nSMYptXntqUnjadMz8LpTDj+pfdh0UnMVUeMOIaOoWQg",
	"TZtpgs6w55jDjglzjGkM4iRrkbWnjWFbhsOivoxmuRAglQpYJ76OkzxjH8zyt+ZA7dwWZSXik2N16DEZ",
	"jsWISYXZvtdE+BZoXFrobj0myV5iMUkhzftAgr2gEpBBuvSQFHe/1dlW7aKo5RPu1UapeDJRR3vbM1oC",
	"o4IGLuLovaMB/lMEV4WpPDhbTtZ/TB2RZKlckEtq0o6jpWJezAoaGJHUq0AZyeflqyCXdJTzpam8qM7g",
	"jpN+JX5qRv8jDGD3a6fkQx29/4iCHA2CAL0570uX4KOffz5trK6h6gaqvkTVBVQ9aK3eOjz4DsFtcnZx",
	"B+kP//fbWwj+E+n3ENw+Wnnd3NghKcB1BG8cvn6N9EVjfr21eos8fIfgSipWN6gjuIk76DVUPfj9AEaK",
	"g+Yihjw0Qcx/TNm/EHAl6nbOSqUm7RcjnSM4KT7v/pQ66awf7s82t7bRrP77wZxx556xuma8eNf8ZQO/",
	"1ReP/rljw2C9saIf6b8huN3c/rGxtmBpXt8jx1sHqLrcqN40nvyC4K6x/hrBn8iZ65aZ1kbwEQYFbq8j",
	"WP/94I555hInk3NRES6P5Vg5nF4mUu0zm5x9GM3a0vtEZtTeGwv3nINVZoKjSxbtPFmQIEdLf2QdtskQ",
	"0uoIzRf6l3hooNCrDFKkkRqTLsnHFyd07e6P2WiNqfTxdiVamlQ0EdCtqGYE+q1vgXgWpy8Jlzjj604U",
	"g+aQQIbFQM5umhFI24zgNvafKc4SH1trbt5uPNrDi9zibRvBe0if757JUGJi8OyGXSw2i/TbtuUACNaM",
	"mz+3luZtc2NXXnTNnUtDDHa+AAVRyn0m4RCYzZJCWmSA24RdkLJrvHhnJsBR9RmqrpHD2ZeoegfBWuPx",
	"HePubzRrpG5ki5RjvMJ/wxpl6LdxhKXfJe03be0v0+VNlguahQg+xB5pdhPBGhaQ3bmG4F6QjtYsPHy/",
	"YUlcn7d9V7RMfUKIIVh6/bPEqtnvMwXQVZVP13jxUBLJ2eeiythVFIVpkCkI1xjmaWGuuTOHA3K7+qbx",
	"aC/pkUjywId0Gy8VCoJSjnTHDvWBaSPFQTmIgFCo4oG+7rXoeSIJZnnSAOV2WU8mVwIZTEhGE1kwNddm",
	"4/F6a2UBr2iyGK0yCn2xBe8j/Gcd6Xc8Nhwj+AH+myxBEkVSUaVnUNx0OXCI1gsJxhMTlR4Il9IVq1Fm",
	"qhzjuHZ8RlCAU89DK5I5YKRGbZQfz37x/5M8HyjJ00X4efyBsm9/ns9n7G0OKzKyS0uxFXCjgJplCPbn",
	"EHzvGIgUdmspcuT+De6Irc73SK9ZxbzwRYpUn3papE54hn3+rfHYTOhQoQR84Rv5ZBxvynMzgpoplN0a",
	"C38wO99Y3Sc2z5kXh0hcm6EUqjCEZW7jDOVI27XemamyFWp04GI8XAYp5X0qZmxaP76CLJo/axBr1x1t",
	"c00rGGBBsx8H0pRWatKbXbSSj96NQaQuzElYJHqcS/QGpH70PwuNtcdIX+RTLThvLL1C8EVza55QiePj",
	"1IkJKw0xwZ3kU771SHZpgfZUOmOCO5lqPtvDTl/XA+NKZVkCE5y1zKxjDSvp4c+KmI0xz65grWeMkh26",
	"sqpzj9h+Dx5pF/oW/NGyiZ+OckKL6NQQ7ynF7mvkSlPlm5aPCmsj6/UcGBBj5KmTi10+RPeKVTrk7xCr",
	"bIjuFLNkiO6SqFyI7piwVMgzp1smRD8+K6hgzAJS0MCTSChGCYjVMMTEeSYLO1wPzEWVEXQ41biJ4eip",
	"QsAec6o+VVl5fUEL7jfurjX1H8hJmZkguY2qVaS/QPpvCNZbN+8Zc8vENodx6y+AoQxI2912qBz8YOpR",
	"aVZcSFNwCpDSk3KrJITYiyhISe9LnDqiKyGkJqQgKz0obkpCurV+mWT0qJypW3KcuyGB4M32lEff7CBY",
	"V2VFw/HbTr21sUaFTz4POuD7bUaOvHVFxudiec9tl2BdCc9dG8DzDFwRFEkoYGvwFTduTzCijYx/yvH0",
	"g9HPyBMSKo+4/7QeuxvGEd9v0oCWyn+J2kzg7GlMA4X4GnNjAT7i5Mw61oofLeIOrOK0NmZeTVzdzzoy",
	"dUZjyifxFOFSZswdDlRbnGgWeiRrAhfpb93dhx+9VM0IT18H6wtynTyHCT/nZ9eotWLugGA0RbiQsq7y",
	"uAF1tjg0yIrxyX714zme922fAzHQtPO83fjupr1ksxe5Zw+ED2ZX3p4yuM7IJclsSRG18jgeyYpbimY+",
	"zqojupSXr5rPS9qMrIj/Td58KudA4OGXSp4b5mY0ragOp9OXT2mKUDz1dTEtFMX0lTNpGTceSttdzNvD",
	"ctFOEQs5LMc8ni6Ff4nSdEoBqlxSsgCzcVURNeA2IUAuexthfch/BzEJIU09Fok8N68b2uYtK0uakCXe",
	"17rDqCnCeY7nSp45pkVtpjR1KisX0vi9JmogO5MWpL+DAU3GdHnRab1IjZwfc9as/+kVoKhm69OnBk8N",
	"DsiCegaPJBeBJBRFbpg7g5/juFPQZogQ08GzICvj40+23UdwzsoywPXG9xuHb14hfbHxepbUbq0MDR6+",
	"eXX45qfD/Xlii/z5EFR9hqPf6hzSF81r7k5hGJrVOUKkQjCBFzj3V+C9c6gSot1PO4T4JLdJmr5cGxY/",
	"0M09d39jdKAvzsdoHvINgpg9Q79hgX2hQru+ocFBG4RWEoNanemvVXOJxrtOGzycJED3IqPx/Edjfx/B",
	"XVur5jHUO6suaFYPYsHcANnZYAoFFZ77xKS/PfqsAqO68fYH4+ABgrWjR3vkzOuuORYe6C+sgfy06Ivh",
	"5K8i/SH5ifkwRzwTHHH8wueYkPp6c6PWWNFbSw8RrJ1RMXOvbmKi4bp9oK4f7r9BcLfx/Mfm1oPmxs7R",
	"g3cI1oz768bqE8I9ybhOq4GiIeL7irLKWJfOxesgZ3bFVZtVdl5WfdeiTX8AVM3O5fQESIH7qhWv59GU",
	"EqgEgHy6P0C2SkDbQTlcmH5wB8ra/B0/JogHmPBBvA3+KrzfVaSv+76tUTFpyQMNxKHKuHO3tbLZFp6j",
	"ZDA/QJO5AfYHRcLMZmw82NT78RCq36AVHBvFWr2xQap3tpOoFNbt6WsdKZNn+/jgNBYKO/LYfdbUB7EL",
	"YS6uW61/MvhJrKI293TV0nc/HF17LyRo2Zlk0Nm801j9lYaOuadiRIn6Yuv7Neutf8BdexxSBQcfIrjD",
	"gP+sTk650uaZI4I1fwGMU7aepsubvTRaIwUQHvyISC8h3nuvG6Q3lttNaAgt0fV+SfwlrB63H8gJXUhJ",
	"WO+tO00XymYF6bgmaKXwrVmHRaIdGfVzXpL+aCbeX5P7J7H1XnU3d54b9e/6bfE7R13AH0Qb2j7Crvdm",
	"Nxpx3Vjg/tnb44dln+2nR6oxI17j5o5VLGemfFlWMiwn/IVTO4Ll+/R1Y+m28XzZmFu2KsvtrVscQ+se",
	"Z/QI7NF5Jtb3BmOmp4LfEO2rTXeF8+cw4A7WemSx22eKnNmCCaIgF85FoaPn3xgPXjSrbwkVnnsiLXjf",
	"uP+G+jxszd6emlmR2Nkn6nuuH7OB99Q/HW8iyztvGPD9Co5IWjnt+5mr6mrVfDI0FHFBAtbcGxFwHenQ",
	"eykidpTvQLjLXJmDABLFR/kh5+PJnnJt52PLiY9OzpU79x9MN9CtNU90Wh5y6B6sfUpu+x2ZtjuCYCKE",
	"8Q1shlpioMUp7PYD5br7qeC2qVQ3MvFmUEPSpx0b1cC3jxMmTQN0epQR17g44ratDNu4nIkhJ7xJaew8",
	"Nc2FfQ2SyvfEtlIuBhzrQ67P1gLWJ8yeMZMbcewZQ5ptDZurxI5RGpItbhMgs0xS/2F4jA42aWRJaYEV",
	"T7YDb2vpH82t7c7BG4HE3sejHuSEJA9c7MRLBvQaPL2PCZMFhPHMJmunf5xmk0qbhiHvD2Ezj89U0vVR",
	"BJ6eyqivzJIluy5pEmNRBcoVG8tecoqKnCtlyQ9/6ZBV9UMXKTGKhvNyVsh7+g6n0+ThjKxqw6fPDJ0x",
	"SylNPq4z/8sEMq7vvzLgKpOV/wsAAP//tAiPk3dlAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
