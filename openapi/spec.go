// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
