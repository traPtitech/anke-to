// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
