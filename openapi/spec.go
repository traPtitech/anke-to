// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
