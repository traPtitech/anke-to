// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xcX3PTyJb/Ki7tPkCtgp1k7sP6LZCpW6ka7gKB3QdCuRS7k2iuLRlJBrxUqtIyfwIx",
	"JBUgmRAmIUwGAhkS5sKyGf5+l+3IsZ/2K2x1619LalmSY8PM1FZRVCz16T59zq/POX36tK5yeblUliUg",
	"aSqXvcqVBUUoAQ0o5JcsFatDhZIoiaqmCBooHK+eBCPS6QpQqvh9Aah5RSxroixxWa5584UxewPB+sHO",
	"xsHCjebMdQS3EXyB4E8IPkXwGvn7GtJ1BHfIv8/G/JLxaTl1RFMq4CifCiXU5ywqXTcWtpEOyfMVBH9D",
	"8KndyYRQVMFRNKOj2k1Ue4D056i2jWqzCO6SV2hGH5M4nhMxsxfJHHhOEkqAy7JnyvGcmp8CJQHPVauW",
	"ccNxWS4CQeKmp3lCdLJ6BqhlWVKj5bJjrK4dvLzPnLmvzf77n43NpZ7O1mU8zjTPCsok0ERpMo7+kf4Z",
	"1T4g/R+oViMchSiTJYi4tL0UDTXZKNmUhclwgex/fIBqD8l09g5WdxCcSx1pPHph7Dw8+PQc6/rxG2MB",
	"c9VPNzsawhkeisWOKGlgEiiEnYsVoOLBJUFUwMjwiHRK0KaCjCH9Caq9RvqveNDa7MiwK44yJnDG9PXH",
	"8ZwCLlZEBRS4LFZYBDuKvTRCOTHhHs6A20OnY4/Kihauob2nCL5uPb6ROrL/8VFjdqGx/HNjRUew3lh6",
	"heAygtdSY5xaGS+JmgYKOUEb4/iUr6kxv2m26/M3xGDWNzHyatsI7jR+uImHGuM0USsCRoPWyh2zQZ/T",
	"orH6prH0islWSS6IE6IzmK+ly5WnXSoMXqqsaB54/bMCJrgs909p10Okzbdq+gwl3LNY9ljiKhCU/FSo",
	"rP3C2Hx08OZJGDOkKxbaVU0RpUlzvMNrNq8AIYZevc3+tFqltDlt05A44K+KXCmTv0QNlNSgtEmD1Llz",
	"1kIGV4RSuQi4bD/v15vzQFAUoYp//w1cPm2ZGdyxUCz+2wSXPd+eVZviuKACbpqP13gUaNiqq8er5iwv",
	"eEcnRi45C4TM4aOsyGWgaCIgUrLtp1d27XqlpREQ1jRtA89TvV+w5+L49KyflXG5UI3Nhd3NcUzE0Jmo",
	"5gqKMKHhfhxlm0aZ4SRpnh1K3uTogkMhj38P8hru/SvBIaA9d9l75skNZAYyfZn+vkz/2UwmS/79S+Zf",
	"s5kMx3MTslLC7bmCoIE+TSxhnx1YA7bmcmKBEUe9fmE8mEf6YvPzR+P2Yxze6HNOrCBVikU7gGGsM8cF",
	"+oIBa6R2FCHocsh5WiAm4jxyD4VcYPqimnNHYocExufrrcezCM4h+BzBGwjOkRlHoIuM6O2/HcB8CCA7",
	"HpAAbjb9WXBFSww7TPSdTASSjPBvldI40XAyslFRmiyCE1OymE++Rk5WippY7ph8NC8ULYMb0XPiJY81",
	"x+DOi0S5HLTCEY7Jhyy7hyCcWJOyVNTRZCj1eidREq7kLgnFCmBFvDxXEqXw19Ox2DbV1BHXloaZTBeF",
	"cVBkijzGlNoQR0yYVp/blh40njI9C6cz4fiX3tdFJzFXHU3EMXQMJQNp0tzhdYY9xxx2zJhjTGMwJ1mL",
	"rD1vDNuSDQvxcprlQoBUKWGd+Agv8IwtDMvfmh21c1uUlYjPjkXQZTYcixGTC7N9t5nwLdC4vNBkXWbJ",
	"XmIxWSHNe8CCvaASsEFIusiKuz3qbGd1Fu+ZYwcchGSYiicTEdrbnuEKGBY0cBZH7x118O8iuCyMF8Hx",
	"ajL6EXVIkqVqSa6oiQmLRfmyKE3aZsdmJXFHpyrjRVGdAoVkhGbSVB2SCiSPrnotKWlywtw+DDFWRq+2",
	"Wj7Y0huYKMzSKArwW/C+dBk++OWXfmN1DdU2UO01qi2g2ofW6o39Dw8RfEby1reQfu9/friB4H8j/Q6C",
	"zw5W3jU3tkj6Zx3Ba/vv3iF90Zhbb63eIA8/IbiSikUGdQQ3MYFeR7UP//sBRoqDnkUMeWiCWOxwFY8M",
	"J0NToo28D1yJyE5aabQhrSvpm/DcjZ2RLthHbe26OacCRW2T7/F2diG41EaGw81+t/IBkYgZkSbkL2f1",
	"D228u4OgBJaWPmeajpZmGxMf0LWo5gSrda5kNc8pdHt/unyGmJB6c/Nm48ErY3XNPqx8huAdpM8FMjGJ",
	"037t+IkzeccxMidLv/Xlk+qfjYU79nQOPQtnoBg8u66UxXOZftv2gA7BunH9l9bSHIIPsHV3zkIPPR2X",
	"hxjTOQNKolT4VsKRDXtKCmmRA24T9hHxtrH7ycxrotoLVFsjxyWvUe0WgvXGo1vG7d/oqZGT3KfkgPQt",
	"/h/Wjd1PzV83SKHAM+z39Nuk/aat5WW64MBKnc5ABO8huGPMbCJYxwKyiesIvgry0ZqB+583LInrc3bO",
	"NVqmPiHEECxtCFhi1ez3uRI41Ln7ofHi4SRyZt+JKiPWKwuTIFcSrjCW6sJsc2sWh0n2eXjjwaukme7k",
	"zpqQjVZKJUGpRqZaHO4Dw0aKg/IUAaFQx3k9jYDpcSIZZrnUAOe2Fc8VKiCHGclpIgum5tpsPFpvrSzg",
	"FU0Wo3WwqS+24F2E/60j/ZbH9WAEz+P/yRIkpx9U5YSnU9x0OXA20g0JxhMTtesLl9Ilq1FuvBrjFG50",
	"SlCAc8JOK5LZYaRGbZR/mSj+//fuf4y9uy8U/drbLqFYzNn7G1ZwZNd7YUPgBgJ1yxbszSL42bERKezZ",
	"UuQw9T4mxIbnR6TXrQo7uJsiJWGeFqkjnm5f/mA8MnfaVDQBd309H43jUHluSlBzpap7eu4Pw+caq3vE",
	"7Dnj4iiJa9OVQh35syxunK4cabsGPDdetaKNDryMZ5ZBTnmfihkb2EA6KWBRBed55E56SCpYJSzYlps9",
	"JyX0zdDuhbf5iDS9pjEMTEOzHwdySFbeyJv6sTJD3v1BpD7MQVgsenxM9D5k5+C/Fhprj5C+yKdacM5Y",
	"eovgbvPpHOESh8mpI2OWRMa4o3zKtybJHjPQnspljHFHU80Xr7Dv1/VAv1JVlsAYZy01K2ltyd+bEuGt",
	"xnjOrmCtZ4yCDLpupnPH2H5bGmkbehYD0rKJwv1ZRbg4UuCoCsoYqSLeUyPZ0wCW5so3LB8V3UaWXjkw",
	"IAbJUwUVuziEpopVGOIniFUUQhPFLAihSRIVg9CECQtBPGO6RSD04+OCCkYsIAWNvKReNp9HZCethiEm",
	"zjNY2NFpYCzqkLjDoUZNDEcPFQL2mEP1qIbG6wtacK9xe62pPyHHGGae5Caq1ZC+i/TfENxpXb9jzC4T",
	"2xw2W395A2VA2m66Q+XgB1OXCm/iQpqCU4CVrhTTJGHEXkRBTrpfwNIRXwkhNSYFp9KF0pUkrFvrl8lG",
	"l4pVDsuOU7QdCN5sT3lwfwvBHVVWNBy/be20Ntao8MnnQft8v83Ikbdq130ulveUoQerBnjuSh8ep++S",
	"oEhCCVuD89yoPcCQNjR6guPpB8PfkickVB5y/7Qeu5vGId9v0oCWyn+I2lTgLGpEA6X4GnNjAT7iJM06",
	"5oofLWICVulRGzOvJq7dZh1BOr0x5ZN4iHApM8YOB6otTjQDPZI1gYv0j+7uw49e6kCfp+9p9AS5Tq7D",
	"hJ/z89CotWLugGA0RTid8t+p4PLlgQwrxjcPjePq0I3z/Yry7XwDwcuk87xd/+6Gu2LzlfzE2yTl7SGD",
	"C4RcO8pXFFGrjuKerICjXC6KecGuzpgoypfN5xVtSlbE/yRvTsgFEHh4TilyWW5K08pqNp2+eExThPKx",
	"78tpoSymLw2mZdx4IG2TmPfx5LKd4hUKWI5FPFwK/xKlyZQCVLmi5AGexmVF1IDbhCCw6m2E9SH/HcRk",
	"hDT1mBLy3LzAY9ulvCxpQp64TetWkKYIpzieq3jGmBS1qcr4sbxcSuP3mqiB/FRakP4O+jQZ8+XFpvUi",
	"NXRqxFls/qeXgKKarfuPZY5l+mRBHcQ9yWUgCWWRy3KD+DkOGAVtiggxHTzLmQTMTNldBGet9ABcb/y4",
	"sf/+LdIXG+9mSEXMykBm//3b/fc/7+/NESPiT2Sg2gscttZmkb5oXhx1ym3QjM4RJhWCCbwyub8C7bSX",
	"M95zWTrEmbhN0vR1tTDHTzf33KaLQUBfRY3RPORWb0zK0Fvh2Il56gwGMhkbhFb2gVqd6e9Vc4nGu6AW",
	"PFwkQPcio/HyJ2NvD8FtW6vmMdInq1ZqRg9iwdy52KlcCgXTPPeNyX979NWuG49/RXDH+PjE+DCPYP3g",
	"wStyZnXb7At39BdWR35e9MVw9leRfo/8xPMwexwM9jh6+jvMyM56c6PeWNFbS/cQrA+qeHJvr2Om4bp9",
	"IK7v771HcLvx8qfm0/nmxtbB/CcE68bddWP1MZk9yZZOqoHqH+K0yrLKWJfOVcbgzMzrlW1X2SlZ9S4z",
	"69YvUDU7CdMVIAVu/U17PY+mVMB0AMj9vQGyVVjXDsrhwvSD235u1omsBwl/TxAPTMIH8Tb4m+b9riJ9",
	"1XdbfdrkpQg0EIcr49bt1spmW3gOk878AE3mBthX9MPMZmw82Nz78RCq36AVHBnGWr22QapvniVRKdyx",
	"h693pEye7eODw1go7Mhj91hTX8UuhLm4w2r9m8w3sYrS3KNRS9+9cHTtvZCg5aeSQWfzVmP1DQ0ds0KQ",
	"ESXqi60f16y3/g637X5IFRu8h+AWA/4MXH5bEHsIzO77ylBMRrnLhAbMEmf3ofyXsJrQXmg8dAEkmXp3",
	"3WC6VDUrN0c1QauEb6k6LM7syBif9LL0RzPN/lrYP4mN9qq7ufXS2HnYa0vdOeoCdjza1PYQdj02vEzE",
	"HcYC987efnlY9th+eqQaM1I1rm9ZFWpmERbLSnpvJrhFrWecYg0s3+fvGks3jZfLxuyyVdFtb7niGFr3",
	"/KBLYI/OD7G+vBUzrRT8ml5PbTpVZ/mnMOAO1rpksdtneJzRgomd4Cyce0UHL+8b87vN2kfChed+Rgve",
	"Ne6+pz6UWLe3lWY2I3bWiPqy4e/ZwHsKjr5sAso7bhjw/QqOSDY57XuZYzrUqvlmYCDiYgKsuzcR4DrS",
	"ofcyQuwo34HwIXNcDgJIFB/lh5zPiHpqpJ3PjiY+8jhZ7dx/MN3AYa15ouPpkFPuYLFRctvvyLTd0QET",
	"IYyvwTLUEgMtTjW1HyhX3Y9mtk2BupGJN/MZkvbs2KgGvgKaMNkZ4NOjjLjGxRG3bWXYxmUwhpzwJqWx",
	"9dw0F/b1QyrjE9tKuRhwrA+5bVsPWJ8we8ZMbsSxZwxptjVsrhI7RmlIlrdNgMwySb2H4Rd0sEkjS0oL",
	"rHiyHXhbS/9oPn3WOXgjkNj9eNSDnJDkgYudeMmAboOn+zFhsoAwntlk7fS/pNmk0qZhyPtD2MwvZyrp",
	"uiYCT09F03mz1MiuJ7qAsagC5ZKNZS87ZUUuVPLkh7/kx6rWoYuLGFW6RTkvFD202XSaPJySVS3bPzgw",
	"aNYumvO4yvx4OOnX91FvbvrC9P8FAAD//3cDWF2BYAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
