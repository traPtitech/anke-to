// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"mf9nAhnX938ZcJXJyv8FAAD//8u+pq54ZQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
