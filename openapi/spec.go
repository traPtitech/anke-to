// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"czPjM/8XAAD//50rif3mXwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
