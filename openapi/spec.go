// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"6kT1/wIAAP//TzjhdFplAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
