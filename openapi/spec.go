// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"7f8CAAD//y/nG0cUZAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
