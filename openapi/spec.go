// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
