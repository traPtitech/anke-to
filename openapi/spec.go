// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
