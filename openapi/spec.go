// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
