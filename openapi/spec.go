// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xcX3PTyJb/Ki7tPkCtgp1k7sP6LZCpW6ka7gKB3QdCuRS7k2iuLRlJBrxUqtIyfwIx",
	"JBUgmRAmIUwGAhkS5sKyGf5+l+3IsZ/2K2x1619LalmSY8PM1FZRVCz16T59zq/POX36tK5yeblUliUg",
	"aSqXvcqVBUUoAQ0o5JcsFatDhZIoiaqmCBooHK+eBCPS6QpQqvh9Aah5RSxroixxWa5584UxewPB+sHO",
	"xsHCjebMdQS3EXyB4E8IPkXwGvn7GtJ1BHfIv8/G/JLxaTl1RFMq4CifCiXU5ywqXTcWtpEOyfMVBH9D",
	"8KndyYRQVMFRNKOj2k1Ue4D056i2jWqzCO6SV2hGH5M4nhMxsxfJHHhOEkqAy7JnyvGcmp8CJQHPVauW",
	"ccNxWS4CQeKmp3lCdLJ6BqhlWVKj5bJjrK4dvLzPnLmvzf77n43NpZ7O1mU8zjTPCsok0ERpMo7+kf4Z",
	"1T4g/R+oViMchSiTJYi4tL0UDTXZKNmUhclwgex/fIBqD8l09g5WdxCcSx1pPHph7Dw8+PQc6/rxG2MB",
	"c9VPNzsawhkeisWOKGlgEiiEnYsVoOLBJUFUwMjwiHRK0KaCjCH9Caq9RvqveNDa7MiwK44yJnDG9PXH",
	"8ZwCLlZEBRS4LFZYBDuKvTRCOTHhHs6A20OnY4/Kihauob2nCL5uPb6ROrL/8VFjdqGx/HNjRUew3lh6",
	"heAygtdSY5xaGS+JmgYKOUEb4/iUr6kxv2m26/M3xGDWNzHyatsI7jR+uImHGuM0USsCRoPWyh2zQZ/T",
	"orH6prH0islWSS6IE6IzmK+ly5WnXSoMXqqsaB54/bMCJrgs909p10Okzbdq+gwl3LNY9ljiKhCU/FSo",
	"rP3C2Hx08OZJGDOkKxbaVU0RpUlzvMNrNq8AIYZevc3+tFqltDlt05A44K+KXCmTv0QNlNSgtEmD1Llz",
	"1kIGV4RSuQi4bD/v15vzQFAUoYp//w1cPm2ZGdyxUCz+2wSXPd+eVZviuKACbpqP13gUaNiqq8er5iwv",
	"eEcnRi45C4TM4aOsyGWgaCIgUrLtp1d27XqlpREQ1jRtA89TvV+w5+L49KyflXG5UI3Nhd3NcUzE0Jmo",
	"5gqKMKHhfhxlm0aZ4SRpnh1K3uTogkMhj38P8hru/SvBIaA9d9l75skNZAYyfZn+vkz/2UwmS/79S+Zf",
	"s5kMx3MTslLC7bmCoIE+TSxhnx1YA7bmcmKBEUe9fmE8mEf6YvPzR+P2Yxze6HNOrCBVikU7gGGsM8cF",
	"+oIBa6R2FCHocsh5WiAm4jxyD4VcYPqimnNHYocExufrrcezCM4h+BzBGwjOkRlHoIuM6O2/HcB8CCA7",
	"HpAAbjb9WXBFSww7TPSdTASSjPBvldI40XAyslFRmiyCE1OymE++Rk5WippY7ph8NC8ULYMb0XPiJY81",
	"x+DOi0S5HLTCEY7Jhyy7hyCcWJOyVNTRZCj1eidREq7kLgnFCmBFvDxXEqXw19Ox2DbV1BHXloaZTBeF",
	"cVBkijzGlNoQR0yYVp/blh40njI9C6cz4fiX3tdFJzFXHU3EMXQMJQNp0tzhdYY9xxx2zJhjTGMwJ1mL",
	"rD1vDNuSDQvxcprlQoBUKWGd+Agv8IwtDMvfmh21c1uUlYjPjkXQZTYcixGTC7N9t5nwLdC4vNBkXWbJ",
	"XmIxWSHNe8CCvaASsEFIusiKuz3qbGd1Fu+ZYwcchGSYiicTEdrbnuEKGBY0cBZH7x118O8iuCyMF8Hx",
	"ajL6EXVIkqVqSa6oSQmHK+WimBc0MCSpl4EyVCzKl0EhaS+nKuNFUZ1KSmhmTNUhqUCS6KrXjJImJ8y9",
	"wxBjWfRqn+XDLL17iQIsDaEAvwXvS5fhg19+6TdW11BtA9Veo9oCqn1ord7Y//AQwWckaX0L6ff+54cb",
	"CP430u8g+Oxg5V1zY4vkftYRvLb/7h3SF4259dbqDfLwE4IrqVhkUEdwExPodVT78L8fYKQ46FnEkIcm",
	"iMUOl/DIcDI0JdrF+8CViOyklUMb0rqSuwlP3Njp6IJ9ztaum3MqUNQ2yR5vZxeCS21kONzmdysZEImY",
	"EWlC/nIm/9CWuzsISmBp6UOm6WhpUo4hoFtRzQn0W18+pf7ZWLhjnz368imJk3fuQDF4DvFJrAkU7KY5",
	"gbTNCW5jf2Z/hhi8enPzZuPBK2N1zZ7bMwTvIH3u8JMMZSbGnF0PyppmmX7b9lAOwbpx/ZfW0hyCD7BR",
	"d84/Dz07l4cY0zkDSqJU+FbC0Qx7SgppkQNuE/ax8Lax+8nMZaLaC1RbI0ckr1HtFoL1xqNbxu3f6KmR",
	"09un5FD0Lf4f1o3dT81fN0hxwDPs7vTbpP2mrf1lusjASpfOQATvIbhjzGwiWMcCsonrCL4K8tGagfuf",
	"NyyJ63N2njVapj4hxBAsvf5ZYtXs97kSONRZ+6Hx4uEkcmbfiSojxCsLkyBXEq4wzNPCbHNrFkdH9hl4",
	"48GrpNnt5D6akI1WSiVBqUamVxzuA8NGioNyEAGhUEd4PQ186XEiGWZ50gDn9uF6rlABOcxIThNZMDXX",
	"ZuPRemtlAa9oshitw0x9sQXvIvxvHem3PDYcI3ge/0+WIDnxoKolPJ3ipsuB85BuSDCemKidXriULlmN",
	"cuPVGCdvo1OCApxTdVqRzA4jNWqj/MsE7/+/X/8D7Nd94efX3moJxWLO3tOwIiO7wAtbATcKqFuGYG8W",
	"wc+OgUhht5Yip6f3MSG2Oj8ivW6V1MHdFKkB87RIHfF0+/IH45G5u6ZCCbjr6/loHG/Kc1OCmitV3eNy",
	"fzA711jdIzbPGReHSFybrhTqjJ9lbuN05Ujbtd658aoVanTgYjyzDHLK+1TM2LQGUkgBcyo4zyN3z0NS",
	"wapZwYbc7DkpoW+Gdi+8zUek3TUtYWAamv04kDeyckXedI+VDfJuDiL1YQ7CYtHjYKI3ITsH/7XQWHuE",
	"9EU+1YJzxtJbBHebT+cIlzhGTh0ZsyQyxh3lU741SXZqgfZU/mKMO5pqvniFHb+uB/qVqrIExjhrqVlZ",
	"akv+3jQIbzXGc3YFaz1jVGDQhTKde8X2+/BI29CzAJCWTRTuzyrCxZECR5VMxkgP8Z6iyJ5GrzRXvmH5",
	"qNA2stbKgQExSJ6yp9jVIDRVrEoQP0GsKhCaKGYFCE2SqPqDJkxY+eEZ0636oB8fF1QwYgEpaORJNBTj",
	"RN9qGGLiPIOFnZUGxqJOhTscatTEcPRQIWCPOVSPima8vqAF9xq315r6E3J0YSZJbqJaDem7SP8NwZ3W",
	"9TvG7DKxzWGz9dczUAak7Y47VA5+MHWp0iYupCk4BVjpSvVMEkbsRRTkpPsVKx3xlRBSY1JwKl2oVUnC",
	"urV+mWx0qTrlsOw4VdqB4M32lAf3txDcUWVFw/Hb1k5rY40Kn3wetM/324wceatY3edieU/debBMgOeu",
	"9OFx+i4JiiSUsDU4z43aAwxpQ6MnOJ5+MPwteUJC5SH3T+uxu2kc8v0mDWip/IeoTQXOn0Y0UIqvMTcW",
	"4CNOz6yjrfjRIiZg1Rq1MfNq4mJt1rGj0xtTPomHCJcyY+xwoNriRDPQI1kTuEj/6O4+/OilDvF5+mJG",
	"T5Dr5DpM+Dk/D41aK+YOCEZThNMp/yUKLl8eyLBifPOgOK4O3TjfryjfzjcQvEw6z9v17264KzZfyU+5",
	"TVLeHjK4QMg9o3xFEbXqKO7JCjjKZjLNqsiYKMqXzecVbUpWxP8kb07IBRB4eE4pclluStPKajadvnhM",
	"U4Tyse/LaaEspi8NpmXceCBtk5gX8OSynd8VCliORTxcCv8SpcmUAlS5ouQBnsZlRdSA24QgsOpthPUh",
	"/x3EZIQ09ZgS8ty8sWPbpbwsaUKeuE3rGpCmCKc4nqt4xpgUtanK+LG8XErj95qogfxUWpD+Dvo0GfPl",
	"xab1IjV0asRZbP6nl4Cimq37j2WOZfpkQR3EPcllIAllkctyg/g5DhgFbYoIMR08yJkEzEzZXQRnrfQA",
	"XG/8uLH//i3SFxvvZkgVzMpAZv/92/33P+/vzREj4k9koNoLHLbWZpG+aN4UdUps0IzOESYVggm8Mrm/",
	"Au20lzPeczs6xJm4TdL0/bQwx08391yfi0FA3z2N0TzkGm9MytBr4NiJKbTPGshkbBBa2Qdqdaa/V80l",
	"Gu9GWvBkkQDdi4zGy5+MvT0Et22tmmdIn6z6qBk9iAVz52KncikUTPPcNyb/7dFXu248/hXBHePjE+PD",
	"PIL1gwevyIHVbbMv3NFfWB35edEXw9lfRfo98hPPw+xxMNjj6OnvMCM7682NemNFby3dQ7A+qOLJvb2O",
	"mYbr9mm4vr/3HsHtxsufmk/nmxtbB/OfEKwbd9eN1cdk9iRbOqkGKn6I0yrLKmNdOncXgzMz71O2XWWn",
	"ZNW7zKxrvkDV7CRMV4AUuOY37fU8mlIB0wEg9/cGyFYxXTsohwvTD277uVkksh4k/D1BPDAJH8Tb4G+a",
	"97uK9FXf9fRpk5ci0EAcroxbt1srm23hOUw68wM0mRtg38kPM5ux8WBz78dDqH6DVnBkGGv12gYpvXmW",
	"RKVwxx6+3pEyebaPDw5jobAjj91jTX0VuxDm4g6r9W8y38SqSHOPRi1998LRtfdCgpafSgadzVuN1Tc0",
	"dMySSEaUqC+2flyz3vo73Lb7ISVs8B6CWwz4M3D5bUHsITC77ytDMRnlLhMaMEuc3YfyX8KKYHuh8dAF",
	"kGTq3XWD6VLVLNsc1QStEr6l6rAysyNjfNLL0h/NNPsLYf8kNtqr7ubWS2PnYa8tdeeoC9jxaFPbQ9j1",
	"2PAyEXcYC9w7e/vlYdlj++mRasxI1bi+ZVWomUVYLCvpvYrhVrSecYo1sHyfv2ss3TReLhuzy1Y5t73l",
	"imNo3fODLoE9Oj/E+tRWzLRS8PN5PbXprnD+HAbcwVqXLHb7DI8zWjCxE5yFczvn4OV9Y363WftIuPBc",
	"zmjBu8bd99SXEev2ttLMZsTOGlGfMvw9G3hPwdGXTUB5xw0Dvl/BEckmp30vc0yHWjXfDAxE3EqAdfca",
	"AlxHOvTeRIgd5TsQPmSOy0EAieKj/JDz3VBPjbTzndHERx4nq537D6YbOKw1T3Q8HXLKHSw2Sm77HZm2",
	"OzpgIoTx+VeGWmKgxamm9gPlqvuVzLYpUDcy8WY+Q9KeHRvVwGc/EyY7A3x6lBHXuDjitq0M27gMxpAT",
	"3qQ0tp6b5sK+e0hlfGJbKRcDjvUhd1brAesTZs+YyY049owhzbaGzVVixygNyfK2CZBZJqn3MPyCDjZp",
	"ZElpgRVPtgNva+kfzafPOgdvBBK7H496kBOSPHCxEy8Z0G3wdD8mTBYQxjObrJ3+lzSbVNo0DHl/CJv5",
	"5UwlXddE4OmpaDpvlhrZ9UQXMBZVoFyysexlp6zIhUqe/PCX/FjVOnRxEaNKtyjnhaKHNptOk4dTsqpl",
	"+wcHBs3aRXMeV5lfCyf9+r7izU1fmP6/AAAA//+86DhIcmAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
