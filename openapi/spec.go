// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{
	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
