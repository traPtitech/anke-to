// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9b1MUx7r4V9ma3++F1l1c1JwXd99hSJ2iKuZoMPe+CBQ1sC1M7u7MOjOrUhZVzGxU",
	"kFW4GCGIAYkEEOJCTnI9qKjf5TazLK/8Cre6519PT89Oz/5Bc+pUWRbM9NP9/H+efvqZ5pYwohSKigxk",
	"XROyt4SiqIoFoAMV/zYmahfHe1Xxqt4nXy4BdRw9zAFtRJWKuqTIQlbQ1RKARtV6+oc1NwUnjfrdbWvq",
	"DnqyvHL04gdoVA/3Z2rL+9C4D42K9eJH68kWNJagOQPNn2H5d2j+BssHsDwFjSo03kNz3ppdsN4tOmMm",
	"zQH5qpjXmlhjERrb0PieexkKzlsNDTFeQWMDgVKTMaYR0oKEGHMN8ystyGIBCFmClUJa0EbGQEFEzNTH",
	"i+jtsKLkgSgLExNpe+TXQCsqsgaa5fuHgymfJ+b88dI6NGY/HEx3SgYc632C8nC5HCcSSUtmBIQ60ihm",
	"PJ1lkh3iMzHVJjR2mTyMmZPNSDRXJCPdGYNzRTLT4U8cG2VF/9t1oPaWotXaXrf2ZPV4aQ4alWPjAUT/",
	"NhDRDukmphORauOWOoXYfzqdagSLVB0DmqY1twNNAz936Hfnwcw/DSdNWL4Ly4+g+RyWd7CO7tpyaaBP",
	"Pm1xXFDk/HhPriDJkqarog5yF8YvRjPEtbPKUXXtaO5OffI2NHYwK55xsiUSsOM8YVLKwx4O/xeOAWHK",
	"qTGHb36x1hc6Si2/S0Gjr4jqKNAleZRH/tB8j2zT/DsslzFGEcJkMYIXtpOsIYiN401RHI1myOHbR7D8",
	"GJOzf7RchcZM6lTtybZVfXz07rnvOY3ds+Sw0xGYoaVY6EiyDkaBitG5VgIaWlwWJRX09fbJl0R9LIwY",
	"5UL7en12FBGAtyY1n5AWVHCtJKkgJ2SRwJKho0X7Usd1L0JjFRrf18q3rae/MYMmluczJE+kKNv47Z4T",
	"P4xVrBBVWP5vWH4Oy2uYp+/hpFlfv1t7tFer3LWqj63Z3Xr5rasD4GYxr+SAkMWaweY8TUZACpIOChqL",
	"/rT7RFRVcRzzQ3VdRaRkbPOPFog/Q1JZuJD9ihqdHRzub0Dj9+Ond1KnDt8+qU3N1RZ/qS2Z0KjUFvaw",
	"eL5PDQhaabgg6TrIDYn6gJBOUUOt2XV7XBc98IoqXuvrhUa19uNdtMiAoKviNSkXeHe8dN9+1+W/rC3/",
	"UVvYYyJTUHLSVclbghrp4xIYl4oyMk1Rg7nB/1fBVSEr/L+Mv/nI2G+1zNcES68gjiM+a0BUR8YiOYz0",
	"0VxHulzeQYxYf3L0x89RyOCpWDav6aokj9rrtS7PERWIHNIMDqMJ8SQq6XnAGECI1R3xaUqVkOaEC4MN",
	"/IucpF8mXQF6KObzf7sqZL9tPOdlyo9OpBOMvyBqIBYihJwdxLQeOYfzGg3PUFSVIlB1CWCCXL+mBfwY",
	"D14R3s11R98SUw9ODE6khXj0sjR2Inoeh9A3GlDRJH9VlVJRw2jhiZPC+fQow9+BEV1wcPZypICog4i6",
	"nnVIyqFfwU2xUMwDIXs2zfLD9DKN8fwK3PBQwIx0ECYFFjR5PCD1zTdODLmqqAVRF7JCqSTlhDTtQGgx",
	"poWvwA1Pyon1m0tV3cH9QEdJlnZh3Da3weDqrZhYIjw6Zy4kL/ktxtVh9JNoIzPoMofUxyB2w0puPAli",
	"7kwXEBxDDyRtKId3yqRK23kGIw8mKfEg0zZSgwzbohFoYF4uYxzzYqY2YTai0YMsa1NkwKFNJHJXwM14",
	"Q6UBvlSwefEDfVUqDOO0MZHk+iV5NA8+H1OkEZAU9mIpr0tFbujAsiNiHlvsYFiW1LSJDRg5AwZqQS93",
	"bOzX7q3UzZ/xJmEdbQPQXq8MzV1ovkLpxu371tQidoFUWJG1G0BNnrn7KubMENYuBjMC8mmKFYkkTC6N",
	"fGCfR1IyBg7INjUfKRKEXK+fejLKDr9vW49moTlff//WuvcUGu/wJnL36B9bx8t37K2ht9OWS/m8v/Vz",
	"vJpwrvtcd1f32a7us1e6u7P43791/3u2u5sMoDlRB126VACsKEo5qRgM41Fi5Q4BiWD+hoJAYN1bYTQl",
	"bcjXZPbe03p/+/jpFDRmoPEcGnegYddSaZ+fthN99p6EtBZ7WDqwVhARVnyI0Iwsr/+m4bl8OAuIy4/T",
	"gJy+nAZLZOo0cEJvHlrb9ehh3nfIoQc1VymGU6vGuWpaKMnStRLos4ej1ITWPXdStquOkFpT9BESD9JV",
	"EG8OXRfzJcAONAVJjn49wYW2LbnmYostdCbSeXEY5JlS4CCpAXAMwaT4/LHkonzC7EDg/eQUFju1pmjz",
	"3CFD7kAetSuTzamj5zSbRsxzue1DjuGCspH7DN2JNEAuFZBQKMDBdEzEC07UKLoRnoMfHQegzWh4XoQT",
	"C3t8u5GgjJYXFxKszSi5NsaJCh7eARRci0qABgZpIyp+YaW5mswVnAgmKsr0EjljIkB3H9RbAr2iDq6g",
	"rL2pCf5DAjfE4Ty4MJ4Mvk/rkRV5vKCUtKSAvaViXhoRddCD95k9+bxyA+SSznKpNJyXtDEEOEgL8XN7",
	"N9XDUOzgRqt9OyRK64hlYlWuN7inabjh8RE++vXXs9byCj4E/B2W52D54Hj5zuHBY9ycUoXmNDQf/u+P",
	"d6DxD2jeh8bm0dLr+tqWdwR5+Po1NOetmVW8h1zEu8qlFBeYYUJjHQGYFVg++HBgxLKDpIKDH7oo5T+l",
	"s4cI5UoEdtE5yEkKx1G3Fb0DhuB+l+g2qR7uT9Y3NuGk+eFgypq+by2vWLvv6r+tobfmvFtKQEKuLZlH",
	"5itobNY3n9VW5hzJm3u4xeAAlhfdw+sda/U1NH7BfS8b9qEaNB4hpUDjTWhUPxxM2+e8PCVbfD6aY1Vq",
	"23mM454T59wuS1aJgGKZVXlvzd33mluYhY0WSXQL4mGEPCn9mWXY4CiAFEfkwQBt4pGJAh7Ad07FQsgD",
	"j3VSffJV5eTyhJbD/Qk7rT6NbDGaiOcmkU2EZCtpQyL5ljKQgHFSRb3E5zr+Qhw4RyQyLAJy7tAhu7g+",
	"JPqD6Y6GSRxjK3ZLDzJyh7ZN3M870zqRkchw0OynXSwyi+Tbhi1Z0KhYt389Xphx3Y3b/dYydT4OHOR8",
	"DQqSnPtCRikwmyQVjxgC/hB2U+COtfvOadMqb8PyinvmMA2NSu3JtHXvFUka7t3bwO1bL9H/RoVw9Jso",
	"wzLv4fHrrvQXyRZTogH7IYpIk+vQqNidzzZwBRp7YTyOJ43D92sOx/2e7HieUkzgYCxp/yy26u77oQJo",
	"qdOyZX0JYBJL2ZeSxthVFMVRMFQQbzLc09xUfQt31rsdkLVHe7FHIVRnYfLEB4P1lwoFUR2PDcce9qFl",
	"Y9lBBIgQU4jWpY7utch1YhFmRdJsZMNLrgSGECJDusRS00CX+6RpG6PTxGXOu03vq9CcDvhwpMGz6H9s",
	"gjiLJLLKYOv8NrL8tp/nTfCyiSgPRHPpujNoaHico6Owf0xUgddNSAqSOWGsRF0tP5n94r+KPB+pyNNC",
	"+nnyiTK1P8/nh9xtDiszIr79IbKAiuMI9qeg8d5zECkU1lL4qP0HBIi8zk/QrDgfVBi7KdznHRiROhWY",
	"NuITJGrm0zzRFH8hN1QY9zup6GSW/b2h0GAqlegAY7lbnqlQJk9+7DI0PN44z2j0YQ6RYTAX80Trhwp/",
	"vSbiWYClYbZEUpemFI2xdf70mlIDnRT2JM7eP97zX3EbNIIkeH0boWKpUyAN1jidEmhwexIrJHsRFoqB",
	"EBe/Daoe/c9cbeUJNOfTqWNjxlp4CY3d+sYMxhJl6alTA04xZEDwv6xzvQLeK4bGE0WVAeF0qr69h1IP",
	"0wzNK48rMhgQHGN3Dlec0gtdm7EHI5p9xjrPGA1D7MbipHG5hRZQjv7PQFkh1tUlaBhNdy75JaXCX45L",
	"0MKdDnz+0tHMncSKWjbIwTRHz+0goXT/arlN0nLbdL9tJ5ptozo8w5HK63ONEV9kO2t4sahehdBassPZ",
	"5pfqt00ifqkI2+Fc6gSble1TBrLv1rpz26o22awc9QFHkl5lhi202vyWpDnZBaNRaUtDW1Nd0iFMPm73",
	"dr8r42QK5TZvhxxqa61izWDOQqNNzWGtouN95hfKQd2we/TDFjSqmqLqKA3dqh6vrRBZIBWOuxqG567g",
	"r/aHrei581OoTSct3OxCK3VdF1VZLCBv8K3Q7y7Ro/f0fy6kyQe9X+An/ka7h/rdGWDnPD3Ez/gFyZn/",
	"lPSx0GFenw4K/FLzv1lLxxxFOueE/IkvAmB1+6VDleUKNH4M7yecDYJ9wGvO48aOLfsiAa8iwPDEbUHb",
	"TzS1xHk609VHxrZ2zE/MxlSJxEtEKxZj7Wj7dEUBJ42AVGx7heZbf+9IGy3Rd5QmP2gW0t53Cl3uDw0s",
	"mM9cvVqZbW3er64lonV6/B/5LBgZqrNvYdztI15OOd99+puSkeK5btY+CVcbPp0WD6r4EUr8Rr3njeb3",
	"Sy4ll7zYiksoabJB0+6S4eQJX7TkWMCIIuviCA6uztfmuipeEtJCSc0LWWFM14taNpMZlfSx0vCZEaWQ",
	"Qe91SQcjYxlR/i/QpWPPEJSC8yLVc6nP00366XWgavbos2e6z3R3KaJ2Hs2kFIEsFiUhK5xHz5ErE/Ux",
	"zItM+NzMqUvRhckH0JhyaiHGau2ntcM3L6E5X3s9ifvcls51H755efjml8P9GcY1HUYVlreh+Sp4z5XT",
	"RAcnTQEjqYpoNaTIwl9B8OtwDSPt3+8WEW78IRnyGoSo9IAcHrilgQOAvOiFY3jEnTmckJF3LnHAh2+u",
	"4gCibg3jgGBe/cYLF1xskAqL57q7XcNyijhi0T4tkRQ5851mt3ryXeYQPpzGxhvU9tqLZ9b+PjR2XE21",
	"jyHfOX1hk2ZYv+0dm3saQGj2RFr4zMa/sUW5N9xYb3+2DmahUTl6tIfPPO/Zc6GJ/sKaKHwlTjT6y9B8",
	"iH9FdNgzng/P2H/5S4RIdbW+VqktmccLD6FROa8h4l7eRkgbq25DhXm4/wYaO7UXz+obs/W1raPZd9Co",
	"WA9WreWnmHpc6x7VQk1jOG4VFY3ha7xrP8KUuR13DTzHJUWjLuWwfTnQdLfK1RZFCl1MMBGMGvhrnpAi",
	"n+2MIjstwI1UOZqZtHKH2hppwE9JxUNEUCreQP8m0nT4y9yibnaasHHJAx3wYGVN38O3RzZQz148Ga2g",
	"yUIb+1KvKLfJrQ8u9rQ+RMo37AX7epFUv1/D3VubSURqVN3lK00JM83OW8LLeBu9JrKQDkvqo/iFqBDX",
	"qtQ/6/6Mq6nRP1135N2JQNc4Con6yFgy1Vmfri3/QaqOvR9iXlB3/NOK85aecMedx76s7iE0thjqP2ni",
	"88WMfdoLjQrdAOWdxWfI9vYgjs5MIQ0PX2HVThVvf9QN48sVdhM6Qod17TeJv0T1Y3dCcyINKQnp7Q2n",
	"mcK43UHcr4t6KXq72WSTcFNO/WIQpT+bi6d7sv9JfH1Q3PWtF1b1cac9fvNaF4oH8Y62g2rXfrcbr3Gt",
	"eODO+duTV8sO+88AVzkzXuv2ltMsSV+MTucv4Xru117vDOLv89e1hbvWi0VratHp+3O3bjyO1j+KaJOy",
	"xxeXWHfccpbcmipm0WWzTkYBn53/HC7f0842+fjGtSVvtXBJKUyF92nZ0YsfnNuiERaBL4uOjQfWgzfE",
	"pe4Vd0Nr11G461XELeyfckgIXER6sqWv4LpRik8LOKbM5Y3vZHWrJav57Nw57j86sWrffR78jIZ7X+Cp",
	"cIvVNU8DcN4fF7m8P3kQaPD3/kRC4gOki+PNR5wmA0fU/fYfIXQkOoiPOM8PdxgkDzSeABudkDDVkfFn",
	"Mhg6wKGa3qcAtFbe8m/Pb1jp9ROnYIE3orrbtAcP/TmAhDXdEJ4BYfB6Mo/drktje7LzHHxCe6ja1nPb",
	"N7lf6RLlKG6X6OuA5+rw192VkKuLcp7M2guP82Rws6EX9YXYtJZGFLMb5O8s/9d5NTzBaJ40jSWkwEpe",
	"Gynv8cLf6xubzStvjCa2P/kNaE5EbcPXHb5aRbuVpzOl4GQZKJ/rZBUjTtJ1EpXdKO37U/jNk3OX9l9Z",
	"Ua+7GhpcoKgqudKIc81wsAfLaZ86o6ti8cx3xYxYlBjN1XllRMwHYLOZDH44pmh69uz5c+ftK1tszG4x",
	"/0oQnpf6mz3CxODE/wUAAP//XOqUdMVyAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
