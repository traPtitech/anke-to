// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
