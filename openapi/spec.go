// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
