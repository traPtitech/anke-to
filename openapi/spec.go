// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
