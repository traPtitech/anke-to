// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
