// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Pq4x/8MEMq7vPzLgKlOV/wsAAP//FNLu1XVlAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
