// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"FSJuAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
