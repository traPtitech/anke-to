// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
