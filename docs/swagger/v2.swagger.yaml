openapi: 3.0.0
servers:
  - url: 'https://anke-to.trap.jp/api'
    description: production
  - url: 'http://localhost:8080/api'
    description: local
info:
  title: anke-to API
  version: 1.0.0-oas3
  description: anke-to API
  contact:
    name: traP
    url: 'https://github.com/traPtitech/anke-to'
security:
  - application:
      - read
      - write
tags:
  - name: questionnaire
  - name: question
  - name: response
  - name: user
  - name: group
  - name: result
paths:
  /questionnaires:
    get:
      operationId: getQuestionnaires
      tags:
        - questionnaire
      description: 与えられた条件を満たす20件以下のアンケートのリストを取得します．
      parameters:
        - $ref: '#/components/parameters/sortInQuery'
        - $ref: '#/components/parameters/searchInQuery'
        - $ref: '#/components/parameters/pageInQuery'
        - $ref: '#/components/parameters/nontargetedInQuery'
      responses:
        '200':
          description: 正常に取得できました。アンケートの配列を返します。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionnairesWithPageMax'
        '400':
          description: 与えられた情報の形式が異なります
        '500':
          description: アンケートを正常に取得できませんでした
        '503':
          description: SQLの実行時間が3sを超えた場合。主に正規表現が原因。
    post:
      operationId: postQuestionnaire
      tags:
        - questionnaire
      description: 新しいアンケートを作成します．
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewQuestionnaire'
      responses:
        '201':
          description: 正常にアンケートを作成できました．作成されたアンケートを返します．
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewQuestionnaireResponse'
        '400':
          description: 与えられた情報の形式が異なります
        '500':
          description: アンケートを正常に作成できませんでした

  '/questionnaires/{questionnaireID}':
    get:
      operationId: getQuestionnaire
      tags:
        - questionnaire
      description: アンケートの情報を取得します。
      parameters:
        - $ref: '#/components/parameters/questionnaireIDInPath'
      responses:
        '200':
          description: 正常に取得できました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionnaireByID'
        '400':
          description: アンケートのIDが無効です
        '404':
          description: アンケートが存在しません
        '500':
          description: アンケートを正常に取得できませんでした
    patch:
      operationId: editQuestionnaire
      tags:
        - questionnaire
      description: アンケートの情報を変更します．
      parameters:
        - $ref: '#/components/parameters/questionnaireIDInPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewQuestionnaire'
      responses:
        '200':
          description: 正常にアンケートを変更できました．
        '400':
          description: アンケートのIDが無効です
        '500':
          description: 正常にアンケートを変更できませんでした
    delete:
      operationId: delteQuestionnaire
      tags:
        - questionnaire
      description: アンケートを削除します．
      parameters:
        - $ref: '#/components/parameters/questionnaireIDInPath'
      responses:
        '200':
          description: 正常にアンケートを削除できました．
        '400':
          description: アンケートのIDが無効です
        '500':
          description: アンケートの削除ができませんでした
  '/questionnaires/{questionnaireID}/questions':
    get:
      operationId: getQuestions
      tags:
        - questionnaire
      description: アンケートに含まれる質問のリストを取得します。
      parameters:
        - $ref: '#/components/parameters/questionnaireIDInPath'
      responses:
        '200':
          description: 正常に取得できました。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuestionDetails'
        '400':
          description: アンケートのIDが無効です
        '500':
          description: 質問のリストを取得できませんでした
    post:
      operationId: PostQuestionByQuestionnaireID
      tags:
        - questionnaire
      parameters:
        - $ref: '#/components/parameters/questionnaireIDInPath'
      description: 新しい質問を作成します．
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewQuestion'
      responses:
        '201':
          description: 正常に質問を作成できました．作成された質問を返します．
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '400':
          description: 正常に作成できませんでした。リクエストが不正です。
        '500':
          description: 正常に作成できません。主に正規表現が原因。
  '/questions/{questionID}':
    patch:
      operationId: editQuestion
      tags:
        - question
      description: 質問を変更します．
      parameters:
        - $ref: '#/components/parameters/questionIDInPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewQuestion'
      responses:
        '200':
          description: 正常に質問を変更できました．
        '400':
          description: 正常に変更できませんでした。リクエストが不正です。
        '500':
          description: 正常に変更できませんでした。主に正規表現が原因。
    delete:
      operationId: deleteQuestion
      tags:
        - question
      description: 質問を削除します．
      parameters:
        - $ref: '#/components/parameters/questionIDInPath'
      responses:
        '200':
          description: 正常に質問を削除できました。
        '500':
          description: 正常に削除できませんでした。存在しない質問です。
  /responses:
    post:
      operationId: postResponse
      tags:
        - response
      description: 新しい回答を作成します．
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostResponse'
      responses:
        '201':
          description: 正常に回答を作成できました．作成された回答を返します．
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseDetails'
        '400':
          description: 与えられた情報の形式が異なります
        '404':
          description: アンケートの回答の期限がきれたため回答が存在しません
        '405':
          description: 回答期限が過ぎたため回答できません
        '500':
          description: 正常に回答が作成できませんでした
  '/responses/{responseID}':
    get:
      operationId: getResponses
      tags:
        - response
      description: あるresponseIDを持つ回答に含まれる全ての質問に対する自分の回答を取得します
      parameters:
        - $ref: '#/components/parameters/responseIDInPath'
      responses:
        '200':
          description: 正常に取得できました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '400':
          description: responseIDが数値に変換できませんでした
        '404':
          description: アンケートの回答の期限がきれたため回答が存在しません
        '500':
          description: responseIDを取得できませんでした
    patch:
      operationId: editResponse
      tags:
        - response
      description: 回答を変更します．
      parameters:
        - $ref: '#/components/parameters/responseIDInPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewResponse'
      responses:
        '200':
          description: 正常に回答を変更できました．
        '400':
          description: 与えられた回答の情報が異なります
        '404':
          description: アンケートの回答の期限がきれたため回答が存在しません
        '405':
          description: 回答期限が過ぎたため回答できません
        '500':
          description: responseIDを取得できませんでした
    delete:
      operationId: deleteResponse
      tags:
        - response
      description: 回答を削除します．
      parameters:
        - $ref: '#/components/parameters/responseIDInPath'
      responses:
        '200':
          description: 正常に回答を削除できました．
        '400':
          description: 与えられた回答の情報が異なります
        '404':
          description: アンケートの回答の期限がきれたため回答が存在しません
        '405':
          description: 回答期限が過ぎたため回答できません
        '500':
          description: responseIDを取得できませんでした
  /users:
    get:
      operationId: getUsers
      tags:
        - user
      summary: 未実装
      description: (botおよび除名されたユーザーを除く、全ての) ユーザーのtraQIDのリストを取得します。
      responses:
        '200':
          description: 正常に取得できました．ユーザーの配列を返します．
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/me:
    get:
      operationId: getUsersMe
      tags:
        - user
      description: 自分のユーザー情報を取得します
      responses:
        '200':
          description: 正常に取得できました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Me'
        '500':
          description: Userが取得できませんでした
  /users/me/responses:
    get:
      operationId: getMyResponses
      tags:
        - user
      description: 自分のすべての回答のリストを取得します。
      responses:
        '200':
          description: 正常に取得できました。回答の配列を返します。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseSummary'
        '500':
          description: Userが取得できませんでした
  '/users/me/responses/{questionnaireID}':
    get:
      operationId: getMyResponsesByID
      tags:
        - user
      parameters:
        - $ref: '#/components/parameters/questionnaireIDInPath'
      description: 特定のquestionnaireIdを持つアンケートに対する自分のすべての回答のリストを取得します。
      responses:
        '200':
          description: 正常に取得できました。回答の配列を返します。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseSummary'
        '400':
          description: questionnaireIDの型が数値ではありません
        '500':
          description: 回答のリストを取得できませんでした
  /users/me/targeted:
    get:
      operationId: getTargetedQuestionnaire
      tags:
        - user
      description: 自分が対象になっている アンケートのリストを取得します。
      parameters:
        - $ref: '#/components/parameters/sortInQuery'
      responses:
        '200':
          description: 正常に取得できました。アンケートの配列を返します。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuestionnaireMyTargeted'
        '500':
          description: 自分のUserIDが取得できませんでした
  /users/{traQID}/targeted:
    get:
      operationId: getTargettedQuestionnairesBytraQID
      tags:
        - user
      description: ユーザが対象になっているアンケートのリストを取得します。
      parameters:
        - $ref: '#/components/parameters/sortInQuery'
        - $ref: '#/components/parameters/answeredInQuery'
        - $ref: '#/components/parameters/traQIDInPath'
      responses:
        '200':
          description: 正常に取得できました。アンケートの配列を返します。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuestionnaireMyTargeted'
        '400':
          description: 与えらえた情報の形式が異なります
        '500':
          description: 対象となっているアンケートのリストを取得できませんでした
  /users/me/administrates:
    get:
      operationId: getMyQuestionnaire
      tags:
        - user
      description: 自分が管理者になっているアンケートのリストを取得します。
      responses:
        '200':
          description: 正常に取得できました。アンケートの配列を返します。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuestionnaireMyAdministrates'
        '500':
          description: 自分が管理者となっているアンケートのリストを取得できませんでした
  /groups:
    get:
      operationId: getGroups
      tags:
        - group
      summary: 未実装
      description: (全ての) グループのリストを取得します
      responses:
        '200':
          description: 正常に取得できました．グループの配列を返します．
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
  '/results/{questionnaireID}':
    get:
      operationId: getResults
      tags:
        - result
      parameters:
        - $ref: '#/components/parameters/questionnaireIDInPath'
        - $ref: '#/components/parameters/responseSortInQuery'
      description: あるquestionnaireIDを持つアンケートの結果をすべて取得します。
      responses:
        '200':
          description: 正常に取得できました。アンケートの各質問に対する結果の配列を返します。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseResult'
        '400':
          description: questionnaireIDの型を数値に変換できませんでした
        '403':
          description: 結果を閲覧する権限がありません。
        '500':
          description: アンケートの回答の詳細情報一覧が取得できませんでした
components:
  parameters:
    answeredInQuery:
      name: answered
      in: query
      description: 回答したもの(answered)か未回答のもの(unanswered)かを選別
      schema:
        $ref: '#/components/schemas/AnsweredType'
    sortInQuery:
      name: sort
      in: query
      description:
        並び順 (作成日時が新しい "created_at", 作成日時が古い "-created_at", タイトルの昇順 "title",
        タイトルの降順 "-title", 更新日時が新しい "modified_at", 更新日時が古い
        "-modified_at" )
      schema:
        $ref: '#/components/schemas/SortType'
    responseSortInQuery:
      name: sort
      in: query
      description:
        並び順 (作成日時が新しい "submitted_at", 作成日時が古い "-submitted_at", タイトルの昇順 "title",
        タイトルの降順 "-title", 更新日時が新しい "modified_at", 更新日時が古い
        "-modified_at" )
      schema:
        $ref: '#/components/schemas/ResponseSortType'
    searchInQuery:
      name: search
      in: query
      description: タイトルの検索
      schema:
        type: string
    pageInQuery:
      name: page
      in: query
      description: 何ページ目か (未定義の場合は1ページ目)
      schema:
        type: integer
    nontargetedInQuery:
      name: nontargeted
      in: query
      description: |
        自分がターゲットになっていないもののみ取得 (true), ターゲットになっているものも含めてすべて取得 (false)。デフォルトはfalse。
      schema:
        type: boolean
    questionnaireIDInPath:
      name: questionnaireID
      in: path
      required: true
      description: |
        アンケートID
      schema:
        type: integer
    questionIDInPath:
      name: questionID
      in: path
      required: true
      description: |
        質問ID
      schema:
        type: integer
    responseIDInPath:
      name: responseID
      in: path
      required: true
      description: |
        回答ID
      schema:
        type: integer
    traQIDInPath:
      name: traQID
      in: path
      required: true
      description: |
        traQ ID(ex:mazrean)
      schema:
        type: string
  schemas:
    AnsweredType:
      type: string
      description: アンケート検索時に回答済みかの状態での絞り込み
      enum:
        - answered
        - unanswered
      x-enum-varnames:
        - Answered
        - Unanswered
    SortType:
      type: string
      description: question、questionnaire用のソートの種類
      enum:
        - created_at
        - -created_at
        - title
        - -title
        - modified_at
        - -modified_at
      x-enum-varnames:
        - CreatedAtASC
        - CreatedAtDESC
        - TitleASC
        - TitleDESC
        - ModifiedAtASC
        - ModifiedAtDESC
    ResponseSortType:
      type: string
      description: response用のsortの種類
      enum:
        - submitted_at
        - -submitted_at
        - title
        - -title
        - modified_at
        - -modified_at
      x-enum-varnames:
        - SubmittedAtASC
        - SubmittedAtDESC
        - TitleASC
        - TitleDESC
        - ModifiedAtASC
        - ModifiedAtDESC
    ResShareType:
      type: string
      example: public
      enum:
        - administrators
        - respondents
        - public
      description: |
        アンケートの結果を, 運営は見られる ("administrators"), 回答済みの人は見られる ("respondents") 誰でも見られる ("public")
    NewQuestionnaire:
      type: object
      properties:
        title:
          type: string
          example: 第1回集会らん☆ぷろ募集アンケート
        description:
          type: string
          example: 第1回メンバー集会でのらん☆ぷろで発表したい人を募集します らん☆ぷろで発表したい人あつまれー！
        res_time_limit:
          type: string
          format: date-time
        res_shared_to:
          $ref: '#/components/schemas/ResShareType'
        targets:
          $ref: '#/components/schemas/Users'
        administrators:
          $ref: '#/components/schemas/Users'
      required:
        - title
        - description
        - res_time_limit
        - res_shared_to
        - targets
        - administrators
    NewQuestionnaireResponse:
      allOf:
      - $ref: '#/components/schemas/QuestionnaireUser'
    Questionnaire:
      type: object
      properties:
        questionnaireID:
          type: integer
          example: 1
        title:
          type: string
          example: 第1回集会らん☆ぷろ募集アンケート
        description:
          type: string
          example: 第1回メンバー集会でのらん☆ぷろで発表したい人を募集します らん☆ぷろで発表したい人あつまれー！
        res_time_limit:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        modified_at:
          type: string
          format: date-time
        res_shared_to:
          $ref: '#/components/schemas/ResShareType'
      required:
        - questionnaireID
        - title
        - description
        - res_time_limit
        - created_at
        - modified_at
        - res_shared_to
        - targets
    QuestionnaireForList:
      allOf:
        - $ref: '#/components/schemas/Questionnaire'
        - type: object
          properties:
            is_targeted:
              type: boolean
              example: true
              description: |
                自分がターゲットになっているかどうか
          required:
            - is_targeted
    QuestionnairesWithPageMax:
      type: object
      properties:
        page_max:
          type: integer
          description: 最大ページ数
        questionnaires:
          type: array
          items:
            $ref: '#/components/schemas/QuestionnaireForList'
      required:
        - page_max
        - questionnaires
    QuestionnaireByID:
      allOf:
        - $ref: '#/components/schemas/QuestionnaireUser'
        - type: object
          properties:
            respondents:
              $ref: '#/components/schemas/Users'
          required:
            - respondents
    QuestionnaireMyTargeted:
      allOf:
      - $ref: '#/components/schemas/Questionnaire'
      - type: object
        properties:
          responded_at:
            type: string
            format: date-time
          has_response:
            type: boolean
            description: 回答済みあるいは下書きが存在する
        required:
          - responded_at
          - has_response
    QuestionnaireMyAdministrates:
        allOf:
        - $ref: '#/components/schemas/QuestionnaireUser'
        - type: object
          properties:
            all_responded:
              type: boolean
              example: true
              description: |
                回答必須でない場合、またはすべてのターゲットが回答済みの場合、true を返す。それ以外はfalseを返す。
            respondents:
              $ref: '#/components/schemas/Users'
          required:
            - all_responded
            - respondents
    QuestionnaireUser:
      allOf:
      - $ref: '#/components/schemas/Questionnaire'
      - type: object
        properties:
          targets:
            $ref: '#/components/schemas/Users'
          administrators:
            $ref: '#/components/schemas/Users'
        required:
          - targets
          - administrators
    QuestionType:
      type: string
      example: Text
      enum:
        - Text
        - TextArea
        - Number
        - MultipleChoice
        - Checkbox
        - LinearScale
      description: |
        どのタイプの質問か ("Text", "TextArea", "Number", "MultipleChoice", "Checkbox", "LinearScale")
    QuestionBase:
      type: object
      properties:
        page_num:
          type: integer
          example: 1
          description: |
            アンケートの何ページ目の質問か
        question_num:
          type: integer
          example: 1
          description: |
            アンケートの質問のうち、何問目か
        question_type:
          $ref: '#/components/schemas/QuestionType'
        body:
          type: string
          example: 質問文
        is_required:
          type: boolean
          example: true
          description: |
            回答必須かどうか
        options:
          type: array
          items:
            type: string
            example: 選択肢1
        scale_label_right:
          type: string
          example: そう思わない
        scale_label_left:
          type: string
          example: そう思う
        scale_min:
          type: integer
          example: 1
        scale_max:
          type: integer
          example: 5
        regex_pattern:
          type: string
          example: ''
        min_bound:
          type: string
          example: ''
        max_bound:
          type: string
          example: ''
      required:
        - page_num
        - question_num
        - question_type
        - body
        - is_required
        - options
        - scale_label_right
        - scale_label_left
        - scale_min
        - scale_max
    NewQuestion:
      allOf:
      - $ref: '#/components/schemas/QuestionBase'
      - type: object
        properties:
          questionnaireID:
            type: integer
            example: 1
        required:
          - questionnaireID
    Question:
      allOf:
      - $ref: '#/components/schemas/NewQuestion'
      - type: object
        properties:
          questionID:
            type: integer
            example: 1
        required:
          - questionID
    QuestionDetails:
      allOf:
      - $ref: '#/components/schemas/QuestionBase'
      - type: object
        properties:
          questionID:
            type: integer
            example: 1
          created_at:
            type: string
            format: date-time
        required:
          - questionID
          - created_at
    NewResponse:
      type: object
      properties:
        questionnaireID:
          type: integer
          example: 1
        body:
          type: array
          items:
            $ref: '#/components/schemas/ResponseBody'
        submitted_at:
          type: string
          format: date-time
      required:
        - temporarily
        - questionnaireID
        - body
    PostResponse:
      type: object
      properties:
        questionnaireID:
          type: integer
          example: 1
        body:
          type: array
          items:
            $ref: '#/components/schemas/ResponseBody'
        temporarily:
          type: boolean
          example: true
        submitted_at:
          type: string
          format: date-time
      required:
        - temporarily
        - questionnaireID
        - body
    Response:
      allOf:
        - $ref: '#/components/schemas/NewResponse'
        - type: object
          properties:
            modified_at:
              type: string
              format: date-time
          required:
            - modified_at
    ResponseDetails:
      allOf:
        - $ref: '#/components/schemas/NewResponse'
        - type: object
          properties:
            responseID:
              type: integer
              example: 1
          required:
            - responseID
    ResponseSummary:
      type: object
      properties:
        responseID:
          type: integer
          example: 1
        questionnaireID:
          type: integer
          example: 1
        questionnaire_title:
          type: string
          example: 第1回集会らん☆ぷろ募集アンケート
        res_time_limit:
          type: string
          format: date-time
        submitted_at:
          type: string
          format: date-time
        modified_at:
          type: string
          format: date-time
      required:
        - responseID
        - questionnaireID
        - questionnaire_title
        - modified_at
    ResponseBody:
      type: object
      properties:
        questionID:
          type: integer
          example: 1
        question_type:
          $ref: '#/components/schemas/QuestionType'
        response:
          type: string
          example: リマインダーBOTを作った話
        option_response:
          type: array
          items:
            type: string
            example: 選択肢1
      required:
        - questionID
        - question_type
    ResponseResult:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          traqID:
            type: string
            example: lolico
        required:
          - traqID
      required:
        - submitted_at
    Users:
      type: array
      items:
        type: string
        example: lolico
    User:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        traqID:
          type: string
          example: lolico
        displayName:
          type: string
          example: ロリ子
        iconFileId:
          type: string
          format: uuid
        twitterId:
          type: string
          example: trapyojo
      required:
        - userId
        - traqID
        - displayName
        - iconFileId
        - twitterId
    Me:
      type: object
      properties:
        traqID:
          type: string
          example: lolico
      required:
        - traqID
    Group:
      type: object
      properties:
        groupId:
          type: string
          format: uuid
        name:
          type: string
          example: 17B
        description:
          type: string
          example: 2017年度入学学部生
        adminUser:
          type: string
          example: lolico
        members:
          type: array
          items:
            $ref: '#/components/schemas/Users'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - groupId
        - name
        - description
        - adminUser
        - members
        - createdAt
        - updatedAt
  securitySchemes:
    application:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'http://example.com/oauth/token'
          scopes:
            write: allows modifying resources
            read: allows reading resources
