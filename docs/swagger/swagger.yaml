openapi: 3.0.0
servers:
  - url: "https://anke-to.trap.jp/api"
    description: production
  - url: "http://localhost:8080/api"
    description: local
info:
  title: anke-to API
  version: 1.0.0-oas3
  description: anke-to API
  contact:
    name: traP
    url: "https://github.com/traPtitech/anke-to"
security:
  - application:
      - read
      - write
tags:
  - name: questionnaire
  - name: response
paths: #TODO 変数の命名を確認する
  /questionnaires: # TODO: 取得個数可変でもいいかも
    get:
      operationId: getQuestionnaires
      tags:
        - questionnaire
      description: 与えられた条件を満たす20件以下のアンケートのリストを取得します。
      parameters:
        - $ref: "#/components/parameters/sortInQuery"
        - $ref: "#/components/parameters/searchInQuery"
        - $ref: "#/components/parameters/pageInQuery"
        - $ref: "#/components/parameters/onlyTargetingMeInQuery"
        - $ref: "#/components/parameters/onlyAdministratedByMeInQuery"
      responses:
        "200":
          description: 正常に取得できました。アンケートの配列を返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionnaireList"
        "400":
          description: 与えられた情報の形式が異なります
        "500":
          description: アンケートを正常に取得できませんでした
        "503":
          description: SQLの実行時間が3sを超えた場合。主に正規表現が原因。
    post:
      operationId: postQuestionnaire
      tags:
        - questionnaire
      description: 新しいアンケートを作成します。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewQuestionnaire"
      responses:
        "201":
          description: 正常にアンケートを作成できました。作成されたアンケートを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionnaireDetail"
        "400":
          description: 与えられた情報の形式が異なります
        "500":
          description: アンケートを正常に作成できませんでした
  /questionnaires/{questionnaireID}:
    get:
      operationId: getQuestionnaire
      tags:
        - questionnaire
      description: アンケートの情報を取得します。
      parameters:
        - $ref: "#/components/parameters/questionnaireIDInPath"
      responses:
        "200":
          description: 正常に取得できました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionnaireDetail"
        "400":
          description: アンケートのIDが無効です
        "404":
          description: アンケートが存在しません
        "500":
          description: アンケートを正常に取得できませんでした
    patch:
      operationId: editQuestionnaire
      tags:
        - questionnaire
      description: アンケートの情報を変更します。
      parameters:
        - $ref: "#/components/parameters/questionnaireIDInPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuestionnaireDetail"
      responses:
        "200":
          description: 正常にアンケートを変更できました。
        "400":
          description: アンケートのIDが無効です
        "500":
          description: 正常にアンケートを変更できませんでした
    delete:
      operationId: deleteQuestionnaire
      tags:
        - questionnaire
      description: アンケートを削除します。
      parameters:
        - $ref: "#/components/parameters/questionnaireIDInPath"
      responses:
        "200":
          description: 正常にアンケートを削除できました。
        "400":
          description: アンケートのIDが無効です
        "500":
          description: アンケートの削除ができませんでした
  /questionnaires/{questionnaireID}/myRemindStatus:
    get:
      operationId: getQuestionnaireMyRemindStatus
      tags:
        - questionnaire
      description: 自分に対するリマインドが有効かどうかを取得します。
      parameters:
        - $ref: "#/components/parameters/questionnaireIDInPath"
      responses:
        "200":
          description: 正常に取得できました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionnaireMyRemindStatus"
        "400":
          description: アンケートのIDが無効です
        "404":
          description: アンケートが存在しません
        "500":
          description: リマインド設定を正常に取得できませんでした
    patch:
      operationId: editQuestionnaireMyRemindStatus
      tags:
        - questionnaire
      description: 自分に対するリマインドが有効かどうかを変更します。
      parameters:
        - $ref: "#/components/parameters/questionnaireIDInPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuestionnaireMyRemindStatus"
      responses:
        "200":
          description: 正常に変更できました。
        "400":
          description: アンケートのIDが無効です
        "404":
          description: アンケートが存在しません
        "500":
          description: リマインド設定を正常に変更できませんでした
  /questionnaires/{questionnaireID}/responses:
    get:
      operationId: getQuestionnaireResponses
      tags:
        - questionnaire
      description: アンケートの全ての回答を取得します。アンケートが匿名回答の場合、取得できません。
      parameters:
        - $ref: "#/components/parameters/questionnaireIDInPath"
        - $ref: "#/components/parameters/responseSortInQuery"
        - $ref: "#/components/parameters/onlyMyResponseInQuery"
      responses:
        "200":
          description: 正常に取得できました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Responses"
        "400":
          description: アンケートのIDが無効です
        "403":
          description: アンケートが匿名回答のため回答を取得できません
        "404":
          description: アンケートが存在しません
        "500":
          description: 回答を正常に取得できませんでした
    post:
      operationId: postQuestionnaireResponse
      tags:
        - questionnaire
      description: 新しい回答を作成します。アンケートが複数回答可能でない場合、過去の回答が削除されます。
      parameters:
        - $ref: "#/components/parameters/questionnaireIDInPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewResponse"
      responses:
        "201":
          description: 正常に回答を作成できました。作成された回答を返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "400":
          description: 与えられた情報の形式が異なります
        "404":
          description: アンケートが存在しません
        "422":
          description: 回答期限が過ぎたため回答できません
        "500":
          description: 正常に回答が作成できませんでした
  /questionnaires/{questionnaireID}/result:
    get:
      operationId: getQuestionnaireResult
      tags:
        - questionnaire
      description: アンケートの回答を集計した結果を取得します。回答者の情報は含まれず、アンケートが匿名回答であっても取得できます。
      parameters:
        - $ref: "#/components/parameters/questionnaireIDInPath"
      responses:
        "200":
          description: 正常に取得できました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Result"
        "400":
          description: アンケートのIDが無効です
        "403":
          description: 結果を閲覧する権限がありません。
        "404":
          description: アンケートが存在しません
        "500":
          description: アンケートの結果を正常に取得できませんでした
  /responses/{responseID}:
    get:
      operationId: getResponse
      tags:
        - response
      description: 回答を取得します。
      parameters:
        - $ref: "#/components/parameters/responseIDInPath"
      responses:
        "200":
          description: 正常に取得できました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "400":
          description: responseIDが無効です
        "403":
          description: 回答を閲覧する権限がありません。
        "404":
          description: 回答が存在しません
        "500":
          description: 回答を正常に取得できませんでした
    patch:
      operationId: editResponse
      tags:
        - response
      description: 回答を変更します。
      parameters:
        - $ref: "#/components/parameters/responseIDInPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Response"
      responses:
        "200":
          description: 正常に回答を変更できました
        "400":
          description: 与えられた回答の情報が異なります
        "403":
          description: 回答を変更する権限がありません
        "404":
          description: アンケートの回答の期限がきれたため回答が存在しません
        "405":
          description: 回答期限が過ぎたため回答できません
        "500":
          description: responseIDを取得できませんでした
    delete:
      operationId: deleteResponse
      tags:
        - response
      description: 回答を削除します
      parameters:
        - $ref: "#/components/parameters/responseIDInPath"
      responses:
        "200":
          description: 正常に回答を削除できました
        "400":
          description: 与えられた回答の情報が異なります
        "403":
          description: 回答を削除する権限がありません。
        "404":
          description: アンケートの回答の期限がきれたため回答が存在しません
        "405":
          description: 回答期限が過ぎたため回答を削除できません
        "500":
          description: responseIDを取得できませんでした
  /responses/myResponses:
    get:
      operationId: getMyResponses
      tags:
        - response
      description: 自分のすべての回答のリストを取得します。
      parameters:
        - $ref: "#/components/parameters/responseSortInQuery"
      responses:
        "200":
          description: 正常に取得できました。回答の配列を返します。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Responses"
        "500":
          description: 自分の回答のリストを取得できませんでした
components:
  parameters:
    answeredInQuery:
      name: answered
      in: query
      description: 回答したもの(answered)か未回答のもの(unanswered)かを選別
      schema:
        $ref: "#/components/schemas/AnsweredType"
    sortInQuery:
      name: sort
      in: query
      description:
        並び順 (作成日時が新しい "created_at", 作成日時が古い "-created_at", タイトルの昇順 "title",
        タイトルの降順 "-title", 更新日時が新しい "modified_at", 更新日時が古い
        "-modified_at" )
      schema:
        $ref: "#/components/schemas/SortType"
    responseSortInQuery:
      name: sort
      in: query
      description:
        並び順 (作成日時が新しい "submitted_at", 作成日時が古い "-submitted_at", タイトルの昇順 "title",
        タイトルの降順 "-title", 更新日時が新しい "modified_at", 更新日時が古い
        "-modified_at" )
      schema:
        $ref: "#/components/schemas/ResponseSortType"
    searchInQuery:
      name: search
      in: query
      description: タイトルの検索
      schema:
        type: string
    pageInQuery:
      name: page
      in: query
      description: 何ページ目か (未定義の場合は1ページ目)
      schema:
        type: integer
    onlyTargetingMeInQuery:
      name: onlyTargetingMe
      in: query
      description: |
        自分がターゲットになっているもののみ取得 (true), ターゲットになっているものも含めてすべて取得 (false)。デフォルトはfalse。
      schema:
        type: boolean
    onlyAdministratedByMeInQuery:
      name: onlyAdministratedByMe
      in: query
      description: |
        自分が管理者になっていないもののみ取得 (true), 管理者になっているものも含めてすべて取得 (false)。デフォルトはfalse。
      schema:
        type: boolean
    onlyMyResponseInQuery:
      name: onlyMyResponse
      in: query
      description: |
        自分の回答のみ取得 (true), 自分の回答以外も含めてすべて取得 (false)。デフォルトはfalse。
      schema:
        type: boolean
    questionnaireIDInPath:
      name: questionnaireID
      in: path
      required: true
      description: |
        アンケートID
      schema:
        type: integer
    questionIDInPath:
      name: questionID
      in: path
      required: true
      description: |
        質問ID
      schema:
        type: integer
    responseIDInPath:
      name: responseID
      in: path
      required: true
      description: |
        回答ID
      schema:
        type: integer
    traQIDInPath:
      name: traQID
      in: path
      required: true
      description: |
        traQ ID(ex:mazrean)
      schema:
        type: string
  schemas: # TODO: description, example, requiredを確認する
    AnsweredType:
      type: string
      description: アンケート検索時に回答済みかの状態での絞り込み
      enum:
        - answered
        - unanswered
      x-enum-varnames:
        - Answered
        - Unanswered
    SortType:
      type: string
      description: question、questionnaire用のソートの種類
      enum:
        - created_at
        - -created_at
        - title
        - -title
        - modified_at
        - -modified_at
      x-enum-varnames:
        - CreatedAtASC
        - CreatedAtDESC
        - TitleASC
        - TitleDESC
        - ModifiedAtASC
        - ModifiedAtDESC
    ResponseSortType:
      type: string
      description: response用のsortの種類
      enum:
        - submitted_at
        - -submitted_at
        - title
        - -title
        - modified_at
        - -modified_at
      x-enum-varnames:
        - SubmittedAtASC
        - SubmittedAtDESC
        - TitleASC
        - TitleDESC
        - ModifiedAtASC
        - ModifiedAtDESC
    ResShareType:
      type: string
      example: anyone
      enum:
        - admins
        - respondents
        - anyone
      description: |
        アンケートの結果を, 運営は見られる ("admins"), 回答済みの人は見られる ("respondents") 誰でも見られる ("anyone")

    NewQuestionnaire:
      allOf:
        - $ref: "#/components/schemas/QuestionnaireTitle"
        - $ref: "#/components/schemas/QuestionnaireDescription"
        - $ref: "#/components/schemas/QuestionnaireResponseDueDateTime"
        - $ref: "#/components/schemas/QuestionnaireResponseViewableBy"
        - $ref: "#/components/schemas/QuestionnaireIsAnonymous"
        - $ref: "#/components/schemas/QuestionnaireIsAllowingMultipleResponses"
        - $ref: "#/components/schemas/QuestionnaireIsPublished"
        - $ref: "#/components/schemas/QuestionnaireTargetsAndAdmins"
        - properties:
            questions:
              type: array
              items:
                $ref: "#/components/schemas/NewQuestion"
          required:
            - questions
    QuestionnaireDetail:
      allOf:
        - $ref: "#/components/schemas/QuestionnaireID"
        - $ref: "#/components/schemas/NewQuestionnaire"
        - $ref: "#/components/schemas/QuestionnaireRespondents"
        - $ref: "#/components/schemas/QuestionnaireCreatedAt"
        - $ref: "#/components/schemas/QuestionnaireModifiedAt"
    QuestionnaireSummary:
      allOf:
        - $ref: "#/components/schemas/QuestionnaireID"
        - $ref: "#/components/schemas/QuestionnaireTitle"
        - $ref: "#/components/schemas/QuestionnaireDescription"
        - $ref: "#/components/schemas/QuestionnaireResponseDueDateTime"
        - $ref: "#/components/schemas/QuestionnaireResponseViewableBy"
        - $ref: "#/components/schemas/QuestionnaireIsAnonymous"
        - $ref: "#/components/schemas/QuestionnaireIsAllowingMultipleResponses"
        - $ref: "#/components/schemas/QuestionnaireIsPublished"
        - properties:
            is_targeting_me:
              type: boolean
              example: true
              description: |
                自分がターゲットになっているかどうか
            responded_at:
              type: string
              format: date-time
            has_my_draft:
              type: boolean
              description: 下書きが存在する
            has_my_response:
              type: boolean
              description: 回答が存在する
            all_responded:
              type: boolean
              example: true
              description: |
                すべての対象者が回答済みの場合 true を返す。それ以外は false を返す。 (対象者が存在しない場合は true を返す)
          required:
            - is_targeting_me
            - responded_at
            - has_my_draft
            - has_my_response
            - all_responded
    QuestionnaireList:
      type: object
      properties:
        page_max:
          type: integer
          example: 1
          description: |
            合計のページ数
        questionnaires:
          type: array
          items:
            $ref: "#/components/schemas/QuestionnaireSummary"
      required:
        - page_max
        - questionnaires
    QuestionnaireID:
      type: object
      properties:
        questionnaireID:
          type: integer
          example: 1
      required:
        - questionnaireID
    QuestionnaireTitle:
      type: object
      properties:
        title:
          type: string
          example: 第1回集会らん☆ぷろ募集アンケート
      required:
        - title
    QuestionnaireDescription:
      type: object
      properties:
        description:
          type: string
          example: 第1回メンバー集会でのらん☆ぷろで発表したい人を募集します らん☆ぷろで発表したい人あつまれー！
      required:
        - description
    QuestionnaireResponseDueDateTime:
      type: object
      properties:
        response_due_date_time:
          type: string
          format: date-time
      required:
        - response_due_date_time
    QuestionnaireResponseViewableBy:
      type: object
      properties:
        response_viewable_by:
          $ref: "#/components/schemas/ResShareType"
      required:
        - response_viewable_by
    QuestionnaireIsAnonymous:
      type: object
      properties:
        is_anonymous:
          type: boolean
          example: true
          description: |
            匿名回答かどうか
      required:
        - is_anonymous
    QuestionnaireIsAllowingMultipleResponses:
      type: object
      properties:
        is_allowing_multiple_responses:
          type: boolean
          example: true
          description: |
            一人が複数回回答できるかどうか
      required:
        - is_allowing_multiple_responses
    QuestionnaireIsPublished:
      type: object
      properties:
        is_published:
          type: boolean
          example: true
          description: |
            アンケートが公開されているかどうか
      required:
        - is_published
    QuestionnaireCreatedAt:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
      required:
        - created_at
    QuestionnaireModifiedAt:
      type: object
      properties:
        modified_at:
          type: string
          format: date-time
      required:
        - modified_at
    QuestionnaireTargetsAndAdmins:
      type: object
      properties:
        targets:
          $ref: "#/components/schemas/UsersAndGroups"
        admins:
          $ref: "#/components/schemas/UsersAndGroups"
      required:
        - targets
        - admins
    QuestionnaireRespondents:
      type: object
      properties:
        respondents:
          $ref: "#/components/schemas/Users"
      required:
        - respondents
    QuestionnaireHasMyResponse:
      type: object
      properties:
        has_response:
          type: boolean
          description: 回答済みあるいは下書きが存在する
      required:
        - has_response
    QuestionnaireMyRemindStatus:
      type: boolean
      description: |
        自分に対するリマインドが有効かどうか
    NewQuestion:
      allOf:
        - $ref: "#/components/schemas/QuestionBase"
        - $ref: "#/components/schemas/QuestionSettingsByType"
    Question:
      allOf:
        - $ref: "#/components/schemas/QuestionBase"
        - $ref: "#/components/schemas/QuestionSettingsByType"
        - properties:
            questionID:
              type: integer
              example: 1
            created_at:
              type: string
              format: date-time
          required:
            - questionID
            - created_at
    Questions:
      type: array
      items:
        $ref: "#/components/schemas/Question"
    QuestionBase:
      type: object
      properties:
        questionnaireID:
          type: integer
          example: 1
        title:
          type: string
        description:
          type: string
        is_required:
          type: boolean
      required:
        - questionType
        - title
        - description
        - is_required
        - questionnaireID
    QuestionSettingsByType:
      oneOf:
        - $ref: "#/components/schemas/QuestionSettingsText"
        - $ref: "#/components/schemas/QuestionSettingsTextLong"
        - $ref: "#/components/schemas/QuestionSettingsNumber"
        - $ref: "#/components/schemas/QuestionSettingsSingleChoice"
        - $ref: "#/components/schemas/QuestionSettingsMultipleChoice"
        - $ref: "#/components/schemas/QuestionSettingsScale"
    QuestionSettingsText:
      allOf:
        - $ref: "#/components/schemas/QuestionTypeText"
        - type: object
          properties:
            maxLength:
              type: integer
          required:
            - maxLength
    QuestionSettingsTextLong:
      allOf:
        - $ref: "#/components/schemas/QuestionTypeTextLong"
        - type: object
          properties:
            maxLength:
              type: number
          required:
            - maxLength
    QuestionSettingsNumber:
      allOf:
        - $ref: "#/components/schemas/QuestionTypeNumber"
        - type: object
          properties:
            minValue:
              type: integer
            maxValue:
              type: integer
          required:
            - minValue
            - maxValue
    QuestionSettingsSingleChoice:
      allOf:
        - $ref: "#/components/schemas/QuestionTypeSingleChoice"
        - type: object
          properties:
            options:
              type: array
              items:
                type: string
          required:
            - options
    QuestionSettingsMultipleChoice:
      allOf:
        - $ref: "#/components/schemas/QuestionTypeMultipleChoice"
        - type: object
          properties:
            options:
              type: array
              items:
                type: string
          required:
            - options
    QuestionSettingsScale:
      allOf:
        - $ref: "#/components/schemas/QuestionTypeScale"
        - type: object
          properties:
            minValue:
              type: integer
            maxValue:
              type: integer
          required:
            - minValue
            - maxValue

    NewResponse:
      type: object
      properties:
        respondent:
          type: string
          example: lolico
        is_draft:
          type: boolean
          example: true
        submitted_at:
          type: string
          format: date-time
        modified_at:
          type: string
          format: date-time
        body:
          type: array
          items:
            $ref: "#/components/schemas/ResponseBody"
      required:
        - respondent
        - is_draft
        - submitted_at
        - modified_at
        - body
    Response:
      allOf:
        - $ref: "#/components/schemas/QuestionnaireID"
        - type: object
          properties:
            responseID:
              type: integer
              example: 1
          required:
            - responseID
        - $ref: "#/components/schemas/NewResponse"
    Responses:
      type: array
      items:
        $ref: "#/components/schemas/Response"
    ResponseBody:
      oneOf:
        - $ref: "#/components/schemas/ResponseSettingsText"
        - $ref: "#/components/schemas/ResponseSettingsTextLong"
        - $ref: "#/components/schemas/ResponseSettingsNumber"
        - $ref: "#/components/schemas/ResponseSettingsSingleChoice"
        - $ref: "#/components/schemas/ResponseSettingsMultipleChoice"
        - $ref: "#/components/schemas/ResponseSettingsScale"
    ResponseSettingsText:
      allOf:
        - $ref: "#/components/schemas/QuestionTypeText"
        - type: object
          properties:
            text:
              type: string
          required:
            - text
    ResponseSettingsTextLong:
      allOf:
        - $ref: "#/components/schemas/QuestionTypeTextLong"
        - type: object
          properties:
            textLong:
              type: string
          required:
            - textLong
    ResponseSettingsNumber:
      allOf:
        - $ref: "#/components/schemas/QuestionTypeNumber"
        - type: object
          properties:
            number:
              type: number
          required:
            - number
    ResponseSettingsSingleChoice:
      allOf:
        - $ref: "#/components/schemas/QuestionTypeSingleChoice"
        - type: object
          properties:
            index:
              type: integer
              description: |
                選択肢のインデックス
          required:
            - index
    ResponseSettingsMultipleChoice:
      allOf:
        - $ref: "#/components/schemas/QuestionTypeMultipleChoice"
        - type: object
          properties:
            indexes:
              type: array
              items:
                type: integer
              description: |
                選択肢のインデックスの配列
          required:
            - indexes
    ResponseSettingsScale:
      allOf:
        - $ref: "#/components/schemas/QuestionTypeScale"
        - type: object
          properties:
            number:
              type: integer
          required:
            - number
    QuestionTypeText:
      type: object
      properties:
        questionType:
          type: string
          enum: [Text]
      required:
        - questionType
    QuestionTypeTextLong:
      type: object
      properties:
        questionType:
          type: string
          enum: [TextLong]
      required:
        - questionType
    QuestionTypeNumber:
      type: object
      properties:
        questionType:
          type: string
          enum: [Number]
      required:
        - questionType
    QuestionTypeSingleChoice:
      type: object
      properties:
        questionType:
          type: string
          enum: [SingleChoice]
      required:
        - questionType
    QuestionTypeMultipleChoice:
      type: object
      properties:
        questionType:
          type: string
          enum: [MultipleChoice]
      required:
        - questionType
    QuestionTypeScale:
      type: object
      properties:
        questionType:
          type: string
          enum: [Scale]
      required:
        - questionType
    Result:
      type: object
      properties:
        questionnaireID:
          type: integer
          example: 1
        responseCount:
          type: integer
          example: 1
        body:
          type: array
          items:
            $ref: "#/components/schemas/ResultBody"
      required:
        - questionnaireID
        - responseCount
        - body
    ResultBody:
      oneOf:
        - $ref: "#/components/schemas/ResultSettingsText"
        - $ref: "#/components/schemas/ResultSettingsTextLong"
        - $ref: "#/components/schemas/ResultSettingsNumber"
        - $ref: "#/components/schemas/ResultSettingsSingleChoice"
        - $ref: "#/components/schemas/ResultSettingsMultipleChoice"
        - $ref: "#/components/schemas/ResultSettingsScale"
    ResultSettingsText:
      allOf:
        - $ref: "#/components/schemas/QuestionTypeText"
        - type: object
          properties:
            answers:
              type: array
              items:
                type: string
          description: |
            回答文の配列
          required:
            - texts
    ResultSettingsTextLong:
      allOf:
        - $ref: "#/components/schemas/QuestionTypeTextLong"
        - type: object
          properties:
            answers:
              type: array
              items:
                type: string
          description: |
            回答文の配列
          required:
            - textLongs
    ResultSettingsNumber:
      allOf:
        - $ref: "#/components/schemas/QuestionTypeNumber"
        - $ref: "#/components/schemas/ResultSettingsAnswerCountPerNumber"
          description: |
            数値ごとの回答数の配列
    ResultSettingsSingleChoice:
      allOf:
        - $ref: "#/components/schemas/QuestionTypeSingleChoice"
        - $ref: "#/components/schemas/ResultSettingsAnswerCountPerIndex"
          description: |
            選択肢ごとの回答数の配列
    ResultSettingsMultipleChoice:
      allOf:
        - $ref: "#/components/schemas/QuestionTypeMultipleChoice"
        - $ref: "#/components/schemas/ResultSettingsAnswerCountPerIndex"
          description: |
            選択肢ごとの回答数の配列
    ResultSettingsScale:
      allOf:
        - $ref: "#/components/schemas/QuestionTypeScale"
        - $ref: "#/components/schemas/ResultSettingsAnswerCountPerNumber"
          description: |
            数値ごとの回答数の配列
    ResultSettingsAnswerCountPerNumber:
      type: object
      properties:
        answerCountPerNumber: #TODO: 配列なのに複数形じゃないの気になる
          type: array
          items:
            type: object
            properties:
              number:
                type: number
              answerCount:
                type: number
            required:
              - number
              - answerCount
      required:
        - indexes
    ResultSettingsAnswerCountPerIndex:
      type: object
      properties:
        AnswerCountPerIndex: #TODO: 配列なのに複数形じゃないの気になるv2
          type: array
          items:
            type: object
            properties:
              index:
                type: number
              answerCount:
                type: number
            required:
              - index
              - answerCount
      required:
        - indexes
    UsersAndGroups:
      type: object
      properties:
        users:
          $ref: "#/components/schemas/Users"
        groups:
          $ref: "#/components/schemas/Groups"
      required:
        - users
        - groups
    Users:
      type: array
      items:
        type: string
        example: cp20
        description: |
          traQ ID
    Groups:
      type: array
      items:
        type: string
        example: 1
        description: |
          Group UUID
  securitySchemes:
    application:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: "https://q.trap.jp/api/v3/oauth2/authorize"
          tokenUrl: "https://q.trap.jp/api/v3/oauth2/token"
          scopes:
            write: allows modifying resources
            read: allows reading resources
